// Copyright 1998-2016 Epic Games, Inc. All Rights Reserved.
/*===========================================================================
	Boilerplate C++ definitions for a single module.
	This is automatically generated by UnrealHeaderTool.
	DO NOT modify this manually! Edit the corresponding .h files instead!
===========================================================================*/

#include "Private/FMODStudioPrivatePCH.h"
#include "GeneratedCppIncludes.h"
#include "FMODStudio.generated.dep.h"
PRAGMA_DISABLE_DEPRECATION_WARNINGS
void EmptyLinkFunctionForGeneratedCode1FMODStudio() {}
static class UEnum* EFMODEventProperty_StaticEnum()
{
	extern FMODSTUDIO_API class UPackage* Z_Construct_UPackage__Script_FMODStudio();
	static class UEnum* Singleton = NULL;
	if (!Singleton)
	{
		extern FMODSTUDIO_API class UEnum* Z_Construct_UEnum_FMODStudio_EFMODEventProperty();
		Singleton = GetStaticEnum(Z_Construct_UEnum_FMODStudio_EFMODEventProperty, Z_Construct_UPackage__Script_FMODStudio(), TEXT("EFMODEventProperty"));
	}
	return Singleton;
}
static FCompiledInDeferEnum Z_CompiledInDeferEnum_UEnum_EFMODEventProperty(EFMODEventProperty_StaticEnum, TEXT("/Script/FMODStudio"), TEXT("EFMODEventProperty"), false, nullptr, nullptr);
	void UFMODAudioComponent::StaticRegisterNativesUFMODAudioComponent()
	{
		FNativeFunctionRegistrar::RegisterFunction(UFMODAudioComponent::StaticClass(), "GetLength",(Native)&UFMODAudioComponent::execGetLength);
		FNativeFunctionRegistrar::RegisterFunction(UFMODAudioComponent::StaticClass(), "GetParameter",(Native)&UFMODAudioComponent::execGetParameter);
		FNativeFunctionRegistrar::RegisterFunction(UFMODAudioComponent::StaticClass(), "GetTimelinePosition",(Native)&UFMODAudioComponent::execGetTimelinePosition);
		FNativeFunctionRegistrar::RegisterFunction(UFMODAudioComponent::StaticClass(), "IsPlaying",(Native)&UFMODAudioComponent::execIsPlaying);
		FNativeFunctionRegistrar::RegisterFunction(UFMODAudioComponent::StaticClass(), "Play",(Native)&UFMODAudioComponent::execPlay);
		FNativeFunctionRegistrar::RegisterFunction(UFMODAudioComponent::StaticClass(), "SetEvent",(Native)&UFMODAudioComponent::execSetEvent);
		FNativeFunctionRegistrar::RegisterFunction(UFMODAudioComponent::StaticClass(), "SetParameter",(Native)&UFMODAudioComponent::execSetParameter);
		FNativeFunctionRegistrar::RegisterFunction(UFMODAudioComponent::StaticClass(), "SetPaused",(Native)&UFMODAudioComponent::execSetPaused);
		FNativeFunctionRegistrar::RegisterFunction(UFMODAudioComponent::StaticClass(), "SetPitch",(Native)&UFMODAudioComponent::execSetPitch);
		FNativeFunctionRegistrar::RegisterFunction(UFMODAudioComponent::StaticClass(), "SetProgrammerSoundName",(Native)&UFMODAudioComponent::execSetProgrammerSoundName);
		FNativeFunctionRegistrar::RegisterFunction(UFMODAudioComponent::StaticClass(), "SetProperty",(Native)&UFMODAudioComponent::execSetProperty);
		FNativeFunctionRegistrar::RegisterFunction(UFMODAudioComponent::StaticClass(), "SetTimelinePosition",(Native)&UFMODAudioComponent::execSetTimelinePosition);
		FNativeFunctionRegistrar::RegisterFunction(UFMODAudioComponent::StaticClass(), "SetVolume",(Native)&UFMODAudioComponent::execSetVolume);
		FNativeFunctionRegistrar::RegisterFunction(UFMODAudioComponent::StaticClass(), "Stop",(Native)&UFMODAudioComponent::execStop);
		FNativeFunctionRegistrar::RegisterFunction(UFMODAudioComponent::StaticClass(), "TriggerCue",(Native)&UFMODAudioComponent::execTriggerCue);
	}
	IMPLEMENT_CLASS(UFMODAudioComponent, 3994235286);
	void AFMODAmbientSound::StaticRegisterNativesAFMODAmbientSound()
	{
	}
	IMPLEMENT_CLASS(AFMODAmbientSound, 1232695691);
	void UFMODAsset::StaticRegisterNativesUFMODAsset()
	{
	}
	IMPLEMENT_CLASS(UFMODAsset, 3081617350);
	void UFMODBank::StaticRegisterNativesUFMODBank()
	{
	}
	IMPLEMENT_CLASS(UFMODBank, 167175473);
	void UFMODBus::StaticRegisterNativesUFMODBus()
	{
	}
	IMPLEMENT_CLASS(UFMODBus, 3291247499);
	void UFMODEvent::StaticRegisterNativesUFMODEvent()
	{
	}
	IMPLEMENT_CLASS(UFMODEvent, 3162176198);
	void UFMODSnapshot::StaticRegisterNativesUFMODSnapshot()
	{
	}
	IMPLEMENT_CLASS(UFMODSnapshot, 71631019);
	void UFMODVCA::StaticRegisterNativesUFMODVCA()
	{
	}
	IMPLEMENT_CLASS(UFMODVCA, 2680760298);
class UScriptStruct* FFMODEventInstance::StaticStruct()
{
	extern FMODSTUDIO_API class UPackage* Z_Construct_UPackage__Script_FMODStudio();
	static class UScriptStruct* Singleton = NULL;
	if (!Singleton)
	{
		extern FMODSTUDIO_API class UScriptStruct* Z_Construct_UScriptStruct_FFMODEventInstance();
		extern FMODSTUDIO_API uint32 Get_Z_Construct_UScriptStruct_FFMODEventInstance_CRC();
		Singleton = GetStaticStruct(Z_Construct_UScriptStruct_FFMODEventInstance, Z_Construct_UPackage__Script_FMODStudio(), TEXT("FMODEventInstance"), sizeof(FFMODEventInstance), Get_Z_Construct_UScriptStruct_FFMODEventInstance_CRC());
	}
	return Singleton;
}
static FCompiledInDeferStruct Z_CompiledInDeferStruct_UScriptStruct_FFMODEventInstance(FFMODEventInstance::StaticStruct, TEXT("/Script/FMODStudio"), TEXT("FMODEventInstance"), false, nullptr, nullptr);
static struct FScriptStruct_FMODStudio_StaticRegisterNativesFFMODEventInstance
{
	FScriptStruct_FMODStudio_StaticRegisterNativesFFMODEventInstance()
	{
		UScriptStruct::DeferCppStructOps(FName(TEXT("FMODEventInstance")),new UScriptStruct::TCppStructOps<FFMODEventInstance>);
	}
} ScriptStruct_FMODStudio_StaticRegisterNativesFFMODEventInstance;
	void UFMODBlueprintStatics::StaticRegisterNativesUFMODBlueprintStatics()
	{
		FNativeFunctionRegistrar::RegisterFunction(UFMODBlueprintStatics::StaticClass(), "BusSetMute",(Native)&UFMODBlueprintStatics::execBusSetMute);
		FNativeFunctionRegistrar::RegisterFunction(UFMODBlueprintStatics::StaticClass(), "BusSetPaused",(Native)&UFMODBlueprintStatics::execBusSetPaused);
		FNativeFunctionRegistrar::RegisterFunction(UFMODBlueprintStatics::StaticClass(), "BusSetVolume",(Native)&UFMODBlueprintStatics::execBusSetVolume);
		FNativeFunctionRegistrar::RegisterFunction(UFMODBlueprintStatics::StaticClass(), "EventInstanceGetParameter",(Native)&UFMODBlueprintStatics::execEventInstanceGetParameter);
		FNativeFunctionRegistrar::RegisterFunction(UFMODBlueprintStatics::StaticClass(), "EventInstanceIsValid",(Native)&UFMODBlueprintStatics::execEventInstanceIsValid);
		FNativeFunctionRegistrar::RegisterFunction(UFMODBlueprintStatics::StaticClass(), "EventInstancePlay",(Native)&UFMODBlueprintStatics::execEventInstancePlay);
		FNativeFunctionRegistrar::RegisterFunction(UFMODBlueprintStatics::StaticClass(), "EventInstanceSetParameter",(Native)&UFMODBlueprintStatics::execEventInstanceSetParameter);
		FNativeFunctionRegistrar::RegisterFunction(UFMODBlueprintStatics::StaticClass(), "EventInstanceSetPaused",(Native)&UFMODBlueprintStatics::execEventInstanceSetPaused);
		FNativeFunctionRegistrar::RegisterFunction(UFMODBlueprintStatics::StaticClass(), "EventInstanceSetPitch",(Native)&UFMODBlueprintStatics::execEventInstanceSetPitch);
		FNativeFunctionRegistrar::RegisterFunction(UFMODBlueprintStatics::StaticClass(), "EventInstanceSetProperty",(Native)&UFMODBlueprintStatics::execEventInstanceSetProperty);
		FNativeFunctionRegistrar::RegisterFunction(UFMODBlueprintStatics::StaticClass(), "EventInstanceSetTransform",(Native)&UFMODBlueprintStatics::execEventInstanceSetTransform);
		FNativeFunctionRegistrar::RegisterFunction(UFMODBlueprintStatics::StaticClass(), "EventInstanceSetVolume",(Native)&UFMODBlueprintStatics::execEventInstanceSetVolume);
		FNativeFunctionRegistrar::RegisterFunction(UFMODBlueprintStatics::StaticClass(), "EventInstanceStop",(Native)&UFMODBlueprintStatics::execEventInstanceStop);
		FNativeFunctionRegistrar::RegisterFunction(UFMODBlueprintStatics::StaticClass(), "EventInstanceTriggerCue",(Native)&UFMODBlueprintStatics::execEventInstanceTriggerCue);
		FNativeFunctionRegistrar::RegisterFunction(UFMODBlueprintStatics::StaticClass(), "FindAssetByName",(Native)&UFMODBlueprintStatics::execFindAssetByName);
		FNativeFunctionRegistrar::RegisterFunction(UFMODBlueprintStatics::StaticClass(), "FindEventByName",(Native)&UFMODBlueprintStatics::execFindEventByName);
		FNativeFunctionRegistrar::RegisterFunction(UFMODBlueprintStatics::StaticClass(), "FindEventInstances",(Native)&UFMODBlueprintStatics::execFindEventInstances);
		FNativeFunctionRegistrar::RegisterFunction(UFMODBlueprintStatics::StaticClass(), "GetOutputDrivers",(Native)&UFMODBlueprintStatics::execGetOutputDrivers);
		FNativeFunctionRegistrar::RegisterFunction(UFMODBlueprintStatics::StaticClass(), "IsBankLoaded",(Native)&UFMODBlueprintStatics::execIsBankLoaded);
		FNativeFunctionRegistrar::RegisterFunction(UFMODBlueprintStatics::StaticClass(), "LoadBank",(Native)&UFMODBlueprintStatics::execLoadBank);
		FNativeFunctionRegistrar::RegisterFunction(UFMODBlueprintStatics::StaticClass(), "LoadBankSampleData",(Native)&UFMODBlueprintStatics::execLoadBankSampleData);
		FNativeFunctionRegistrar::RegisterFunction(UFMODBlueprintStatics::StaticClass(), "LoadEventSampleData",(Native)&UFMODBlueprintStatics::execLoadEventSampleData);
		FNativeFunctionRegistrar::RegisterFunction(UFMODBlueprintStatics::StaticClass(), "MixerResume",(Native)&UFMODBlueprintStatics::execMixerResume);
		FNativeFunctionRegistrar::RegisterFunction(UFMODBlueprintStatics::StaticClass(), "MixerSuspend",(Native)&UFMODBlueprintStatics::execMixerSuspend);
		FNativeFunctionRegistrar::RegisterFunction(UFMODBlueprintStatics::StaticClass(), "PlayEvent2D",(Native)&UFMODBlueprintStatics::execPlayEvent2D);
		FNativeFunctionRegistrar::RegisterFunction(UFMODBlueprintStatics::StaticClass(), "PlayEventAtLocation",(Native)&UFMODBlueprintStatics::execPlayEventAtLocation);
		FNativeFunctionRegistrar::RegisterFunction(UFMODBlueprintStatics::StaticClass(), "PlayEventAttached",(Native)&UFMODBlueprintStatics::execPlayEventAttached);
		FNativeFunctionRegistrar::RegisterFunction(UFMODBlueprintStatics::StaticClass(), "SetOutputDriverByIndex",(Native)&UFMODBlueprintStatics::execSetOutputDriverByIndex);
		FNativeFunctionRegistrar::RegisterFunction(UFMODBlueprintStatics::StaticClass(), "SetOutputDriverByName",(Native)&UFMODBlueprintStatics::execSetOutputDriverByName);
		FNativeFunctionRegistrar::RegisterFunction(UFMODBlueprintStatics::StaticClass(), "UnloadBank",(Native)&UFMODBlueprintStatics::execUnloadBank);
		FNativeFunctionRegistrar::RegisterFunction(UFMODBlueprintStatics::StaticClass(), "UnloadBankSampleData",(Native)&UFMODBlueprintStatics::execUnloadBankSampleData);
		FNativeFunctionRegistrar::RegisterFunction(UFMODBlueprintStatics::StaticClass(), "UnloadEventSampleData",(Native)&UFMODBlueprintStatics::execUnloadEventSampleData);
		FNativeFunctionRegistrar::RegisterFunction(UFMODBlueprintStatics::StaticClass(), "VCASetVolume",(Native)&UFMODBlueprintStatics::execVCASetVolume);
	}
	IMPLEMENT_CLASS(UFMODBlueprintStatics, 2970567603);
static class UEnum* EFMODSpeakerMode_StaticEnum()
{
	extern FMODSTUDIO_API class UPackage* Z_Construct_UPackage__Script_FMODStudio();
	static class UEnum* Singleton = NULL;
	if (!Singleton)
	{
		extern FMODSTUDIO_API class UEnum* Z_Construct_UEnum_FMODStudio_EFMODSpeakerMode();
		Singleton = GetStaticEnum(Z_Construct_UEnum_FMODStudio_EFMODSpeakerMode, Z_Construct_UPackage__Script_FMODStudio(), TEXT("EFMODSpeakerMode"));
	}
	return Singleton;
}
static FCompiledInDeferEnum Z_CompiledInDeferEnum_UEnum_EFMODSpeakerMode(EFMODSpeakerMode_StaticEnum, TEXT("/Script/FMODStudio"), TEXT("EFMODSpeakerMode"), false, nullptr, nullptr);
	void UFMODSettings::StaticRegisterNativesUFMODSettings()
	{
	}
	IMPLEMENT_CLASS(UFMODSettings, 3625389234);
	void UFMODSnapshotReverb::StaticRegisterNativesUFMODSnapshotReverb()
	{
	}
	IMPLEMENT_CLASS(UFMODSnapshotReverb, 531802905);
#if USE_COMPILED_IN_NATIVES
// Cross Module References
	ENGINE_API class UClass* Z_Construct_UClass_USceneComponent();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FAttenuationSettings();
	ENGINE_API class UClass* Z_Construct_UClass_USoundAttenuation_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_AActor();
	COREUOBJECT_API class UClass* Z_Construct_UClass_UObject();
	COREUOBJECT_API class UScriptStruct* Z_Construct_UScriptStruct_FGuid();
	COREUOBJECT_API class UScriptStruct* Z_Construct_UScriptStruct_FTransform();
	COREUOBJECT_API class UClass* Z_Construct_UClass_UObject_NoRegister();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_EAttachLocation();
	COREUOBJECT_API class UScriptStruct* Z_Construct_UScriptStruct_FVector();
	ENGINE_API class UClass* Z_Construct_UClass_USceneComponent_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UBlueprintFunctionLibrary();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FDirectoryPath();
	ENGINE_API class UClass* Z_Construct_UClass_UReverbEffect();

	FMODSTUDIO_API class UFunction* Z_Construct_UDelegateFunction_FMODStudio_OnTimelineBeat__DelegateSignature();
	FMODSTUDIO_API class UFunction* Z_Construct_UDelegateFunction_FMODStudio_OnTimelineMarker__DelegateSignature();
	FMODSTUDIO_API class UFunction* Z_Construct_UDelegateFunction_FMODStudio_OnEventStopped__DelegateSignature();
	FMODSTUDIO_API class UEnum* Z_Construct_UEnum_FMODStudio_EFMODEventProperty();
	FMODSTUDIO_API class UFunction* Z_Construct_UFunction_UFMODAudioComponent_GetLength();
	FMODSTUDIO_API class UFunction* Z_Construct_UFunction_UFMODAudioComponent_GetParameter();
	FMODSTUDIO_API class UFunction* Z_Construct_UFunction_UFMODAudioComponent_GetTimelinePosition();
	FMODSTUDIO_API class UFunction* Z_Construct_UFunction_UFMODAudioComponent_IsPlaying();
	FMODSTUDIO_API class UFunction* Z_Construct_UFunction_UFMODAudioComponent_Play();
	FMODSTUDIO_API class UFunction* Z_Construct_UFunction_UFMODAudioComponent_SetEvent();
	FMODSTUDIO_API class UFunction* Z_Construct_UFunction_UFMODAudioComponent_SetParameter();
	FMODSTUDIO_API class UFunction* Z_Construct_UFunction_UFMODAudioComponent_SetPaused();
	FMODSTUDIO_API class UFunction* Z_Construct_UFunction_UFMODAudioComponent_SetPitch();
	FMODSTUDIO_API class UFunction* Z_Construct_UFunction_UFMODAudioComponent_SetProgrammerSoundName();
	FMODSTUDIO_API class UFunction* Z_Construct_UFunction_UFMODAudioComponent_SetProperty();
	FMODSTUDIO_API class UFunction* Z_Construct_UFunction_UFMODAudioComponent_SetTimelinePosition();
	FMODSTUDIO_API class UFunction* Z_Construct_UFunction_UFMODAudioComponent_SetVolume();
	FMODSTUDIO_API class UFunction* Z_Construct_UFunction_UFMODAudioComponent_Stop();
	FMODSTUDIO_API class UFunction* Z_Construct_UFunction_UFMODAudioComponent_TriggerCue();
	FMODSTUDIO_API class UClass* Z_Construct_UClass_UFMODAudioComponent_NoRegister();
	FMODSTUDIO_API class UClass* Z_Construct_UClass_UFMODAudioComponent();
	FMODSTUDIO_API class UClass* Z_Construct_UClass_AFMODAmbientSound_NoRegister();
	FMODSTUDIO_API class UClass* Z_Construct_UClass_AFMODAmbientSound();
	FMODSTUDIO_API class UClass* Z_Construct_UClass_UFMODAsset_NoRegister();
	FMODSTUDIO_API class UClass* Z_Construct_UClass_UFMODAsset();
	FMODSTUDIO_API class UClass* Z_Construct_UClass_UFMODBank_NoRegister();
	FMODSTUDIO_API class UClass* Z_Construct_UClass_UFMODBank();
	FMODSTUDIO_API class UClass* Z_Construct_UClass_UFMODBus_NoRegister();
	FMODSTUDIO_API class UClass* Z_Construct_UClass_UFMODBus();
	FMODSTUDIO_API class UClass* Z_Construct_UClass_UFMODEvent_NoRegister();
	FMODSTUDIO_API class UClass* Z_Construct_UClass_UFMODEvent();
	FMODSTUDIO_API class UClass* Z_Construct_UClass_UFMODSnapshot_NoRegister();
	FMODSTUDIO_API class UClass* Z_Construct_UClass_UFMODSnapshot();
	FMODSTUDIO_API class UClass* Z_Construct_UClass_UFMODVCA_NoRegister();
	FMODSTUDIO_API class UClass* Z_Construct_UClass_UFMODVCA();
	FMODSTUDIO_API class UScriptStruct* Z_Construct_UScriptStruct_FFMODEventInstance();
	FMODSTUDIO_API class UFunction* Z_Construct_UFunction_UFMODBlueprintStatics_BusSetMute();
	FMODSTUDIO_API class UFunction* Z_Construct_UFunction_UFMODBlueprintStatics_BusSetPaused();
	FMODSTUDIO_API class UFunction* Z_Construct_UFunction_UFMODBlueprintStatics_BusSetVolume();
	FMODSTUDIO_API class UFunction* Z_Construct_UFunction_UFMODBlueprintStatics_EventInstanceGetParameter();
	FMODSTUDIO_API class UFunction* Z_Construct_UFunction_UFMODBlueprintStatics_EventInstanceIsValid();
	FMODSTUDIO_API class UFunction* Z_Construct_UFunction_UFMODBlueprintStatics_EventInstancePlay();
	FMODSTUDIO_API class UFunction* Z_Construct_UFunction_UFMODBlueprintStatics_EventInstanceSetParameter();
	FMODSTUDIO_API class UFunction* Z_Construct_UFunction_UFMODBlueprintStatics_EventInstanceSetPaused();
	FMODSTUDIO_API class UFunction* Z_Construct_UFunction_UFMODBlueprintStatics_EventInstanceSetPitch();
	FMODSTUDIO_API class UFunction* Z_Construct_UFunction_UFMODBlueprintStatics_EventInstanceSetProperty();
	FMODSTUDIO_API class UFunction* Z_Construct_UFunction_UFMODBlueprintStatics_EventInstanceSetTransform();
	FMODSTUDIO_API class UFunction* Z_Construct_UFunction_UFMODBlueprintStatics_EventInstanceSetVolume();
	FMODSTUDIO_API class UFunction* Z_Construct_UFunction_UFMODBlueprintStatics_EventInstanceStop();
	FMODSTUDIO_API class UFunction* Z_Construct_UFunction_UFMODBlueprintStatics_EventInstanceTriggerCue();
	FMODSTUDIO_API class UFunction* Z_Construct_UFunction_UFMODBlueprintStatics_FindAssetByName();
	FMODSTUDIO_API class UFunction* Z_Construct_UFunction_UFMODBlueprintStatics_FindEventByName();
	FMODSTUDIO_API class UFunction* Z_Construct_UFunction_UFMODBlueprintStatics_FindEventInstances();
	FMODSTUDIO_API class UFunction* Z_Construct_UFunction_UFMODBlueprintStatics_GetOutputDrivers();
	FMODSTUDIO_API class UFunction* Z_Construct_UFunction_UFMODBlueprintStatics_IsBankLoaded();
	FMODSTUDIO_API class UFunction* Z_Construct_UFunction_UFMODBlueprintStatics_LoadBank();
	FMODSTUDIO_API class UFunction* Z_Construct_UFunction_UFMODBlueprintStatics_LoadBankSampleData();
	FMODSTUDIO_API class UFunction* Z_Construct_UFunction_UFMODBlueprintStatics_LoadEventSampleData();
	FMODSTUDIO_API class UFunction* Z_Construct_UFunction_UFMODBlueprintStatics_MixerResume();
	FMODSTUDIO_API class UFunction* Z_Construct_UFunction_UFMODBlueprintStatics_MixerSuspend();
	FMODSTUDIO_API class UFunction* Z_Construct_UFunction_UFMODBlueprintStatics_PlayEvent2D();
	FMODSTUDIO_API class UFunction* Z_Construct_UFunction_UFMODBlueprintStatics_PlayEventAtLocation();
	FMODSTUDIO_API class UFunction* Z_Construct_UFunction_UFMODBlueprintStatics_PlayEventAttached();
	FMODSTUDIO_API class UFunction* Z_Construct_UFunction_UFMODBlueprintStatics_SetOutputDriverByIndex();
	FMODSTUDIO_API class UFunction* Z_Construct_UFunction_UFMODBlueprintStatics_SetOutputDriverByName();
	FMODSTUDIO_API class UFunction* Z_Construct_UFunction_UFMODBlueprintStatics_UnloadBank();
	FMODSTUDIO_API class UFunction* Z_Construct_UFunction_UFMODBlueprintStatics_UnloadBankSampleData();
	FMODSTUDIO_API class UFunction* Z_Construct_UFunction_UFMODBlueprintStatics_UnloadEventSampleData();
	FMODSTUDIO_API class UFunction* Z_Construct_UFunction_UFMODBlueprintStatics_VCASetVolume();
	FMODSTUDIO_API class UClass* Z_Construct_UClass_UFMODBlueprintStatics_NoRegister();
	FMODSTUDIO_API class UClass* Z_Construct_UClass_UFMODBlueprintStatics();
	FMODSTUDIO_API class UEnum* Z_Construct_UEnum_FMODStudio_EFMODSpeakerMode();
	FMODSTUDIO_API class UClass* Z_Construct_UClass_UFMODSettings_NoRegister();
	FMODSTUDIO_API class UClass* Z_Construct_UClass_UFMODSettings();
	FMODSTUDIO_API class UClass* Z_Construct_UClass_UFMODSnapshotReverb_NoRegister();
	FMODSTUDIO_API class UClass* Z_Construct_UClass_UFMODSnapshotReverb();
	FMODSTUDIO_API class UPackage* Z_Construct_UPackage__Script_FMODStudio();
	UFunction* Z_Construct_UDelegateFunction_FMODStudio_OnTimelineBeat__DelegateSignature()
	{
		struct _Script_FMODStudio_eventOnTimelineBeat_Parms
		{
			int32 Bar;
			int32 Beat;
			int32 Position;
			float Tempo;
			int32 TimeSignatureUpper;
			int32 TimeSignatureLower;
		};
		UObject* Outer=Z_Construct_UPackage__Script_FMODStudio();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("OnTimelineBeat__DelegateSignature"), RF_Public|RF_Transient|RF_MarkAsNative) UDelegateFunction(FObjectInitializer(), NULL, 0x00130000, 65535, sizeof(_Script_FMODStudio_eventOnTimelineBeat_Parms));
			UProperty* NewProp_TimeSignatureLower = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("TimeSignatureLower"), RF_Public|RF_Transient|RF_MarkAsNative) UIntProperty(CPP_PROPERTY_BASE(TimeSignatureLower, _Script_FMODStudio_eventOnTimelineBeat_Parms), 0x0010000000000080);
			UProperty* NewProp_TimeSignatureUpper = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("TimeSignatureUpper"), RF_Public|RF_Transient|RF_MarkAsNative) UIntProperty(CPP_PROPERTY_BASE(TimeSignatureUpper, _Script_FMODStudio_eventOnTimelineBeat_Parms), 0x0010000000000080);
			UProperty* NewProp_Tempo = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Tempo"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(Tempo, _Script_FMODStudio_eventOnTimelineBeat_Parms), 0x0010000000000080);
			UProperty* NewProp_Position = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Position"), RF_Public|RF_Transient|RF_MarkAsNative) UIntProperty(CPP_PROPERTY_BASE(Position, _Script_FMODStudio_eventOnTimelineBeat_Parms), 0x0010000000000080);
			UProperty* NewProp_Beat = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Beat"), RF_Public|RF_Transient|RF_MarkAsNative) UIntProperty(CPP_PROPERTY_BASE(Beat, _Script_FMODStudio_eventOnTimelineBeat_Parms), 0x0010000000000080);
			UProperty* NewProp_Bar = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Bar"), RF_Public|RF_Transient|RF_MarkAsNative) UIntProperty(CPP_PROPERTY_BASE(Bar, _Script_FMODStudio_eventOnTimelineBeat_Parms), 0x0010000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/FMODAudioComponent.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("called when we reach a beat on the timeline"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UDelegateFunction_FMODStudio_OnTimelineMarker__DelegateSignature()
	{
		struct _Script_FMODStudio_eventOnTimelineMarker_Parms
		{
			FString Name;
			int32 Position;
		};
		UObject* Outer=Z_Construct_UPackage__Script_FMODStudio();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("OnTimelineMarker__DelegateSignature"), RF_Public|RF_Transient|RF_MarkAsNative) UDelegateFunction(FObjectInitializer(), NULL, 0x00130000, 65535, sizeof(_Script_FMODStudio_eventOnTimelineMarker_Parms));
			UProperty* NewProp_Position = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Position"), RF_Public|RF_Transient|RF_MarkAsNative) UIntProperty(CPP_PROPERTY_BASE(Position, _Script_FMODStudio_eventOnTimelineMarker_Parms), 0x0010000000000080);
			UProperty* NewProp_Name = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Name"), RF_Public|RF_Transient|RF_MarkAsNative) UStrProperty(CPP_PROPERTY_BASE(Name, _Script_FMODStudio_eventOnTimelineMarker_Parms), 0x0010000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/FMODAudioComponent.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("called when we reach a named marker on the timeline"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UDelegateFunction_FMODStudio_OnEventStopped__DelegateSignature()
	{
		UObject* Outer=Z_Construct_UPackage__Script_FMODStudio();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("OnEventStopped__DelegateSignature"), RF_Public|RF_Transient|RF_MarkAsNative) UDelegateFunction(FObjectInitializer(), NULL, 0x00130000, 65535);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/FMODAudioComponent.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("called when an event stops, either because it played to completion or because a Stop() call turned it off early"));
#endif
		}
		return ReturnFunction;
	}
	UEnum* Z_Construct_UEnum_FMODStudio_EFMODEventProperty()
	{
		UPackage* Outer=Z_Construct_UPackage__Script_FMODStudio();
		extern uint32 Get_Z_Construct_UEnum_FMODStudio_EFMODEventProperty_CRC();
		static UEnum* ReturnEnum = FindExistingEnumIfHotReloadOrDynamic(Outer, TEXT("EFMODEventProperty"), 0, Get_Z_Construct_UEnum_FMODStudio_EFMODEventProperty_CRC(), false);
		if (!ReturnEnum)
		{
			ReturnEnum = new(EC_InternalUseOnlyConstructor, Outer, TEXT("EFMODEventProperty"), RF_Public|RF_Transient|RF_MarkAsNative) UEnum(FObjectInitializer());
			TArray<TPair<FName, uint8>> EnumNames;
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EFMODEventProperty::ChannelPriority")), 0));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EFMODEventProperty::ScheduleDelay")), 1));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EFMODEventProperty::ScheduleLookahead")), 2));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EFMODEventProperty::MinimumDistance")), 3));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EFMODEventProperty::MaximumDistance")), 4));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EFMODEventProperty::Count")), 5));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EFMODEventProperty::EFMODEventProperty_MAX")), 6));
			ReturnEnum->SetEnums(EnumNames, UEnum::ECppForm::Namespaced);
			ReturnEnum->CppType = TEXT("EFMODEventProperty::Type");
#if WITH_METADATA
			UMetaData* MetaData = ReturnEnum->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnEnum, TEXT("ChannelPriority.ToolTip"), TEXT("Priority to set on low-level channels created by this event instance (-1 to 256)."));
			MetaData->SetValue(ReturnEnum, TEXT("Count.ToolTip"), TEXT("Number of options"));
			MetaData->SetValue(ReturnEnum, TEXT("MaximumDistance.ToolTip"), TEXT("Override the event's 3D maximum distance, or -1 for default."));
			MetaData->SetValue(ReturnEnum, TEXT("MinimumDistance.ToolTip"), TEXT("Override the event's 3D minimum distance, or -1 for default."));
			MetaData->SetValue(ReturnEnum, TEXT("ModuleRelativePath"), TEXT("Classes/FMODAudioComponent.h"));
			MetaData->SetValue(ReturnEnum, TEXT("ScheduleDelay.ToolTip"), TEXT("Schedule delay to synchronized playback for multiple tracks in DSP clocks, or -1 for default."));
			MetaData->SetValue(ReturnEnum, TEXT("ScheduleLookahead.ToolTip"), TEXT("Schedule look-ahead on the timeline in DSP clocks, or -1 for default."));
			MetaData->SetValue(ReturnEnum, TEXT("ToolTip"), TEXT("Event property"));
#endif
		}
		return ReturnEnum;
	}
	uint32 Get_Z_Construct_UEnum_FMODStudio_EFMODEventProperty_CRC() { return 1019624333U; }
	UFunction* Z_Construct_UFunction_UFMODAudioComponent_GetLength()
	{
		struct FMODAudioComponent_eventGetLength_Parms
		{
			int32 ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UFMODAudioComponent();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GetLength"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x54020401, 65535, sizeof(FMODAudioComponent_eventGetLength_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UIntProperty(CPP_PROPERTY_BASE(ReturnValue, FMODAudioComponent_eventGetLength_Parms), 0x0010000000000580);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Audio|FMOD|Components"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/FMODAudioComponent.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Get the event length in milliseconds"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UFMODAudioComponent_GetParameter()
	{
		struct FMODAudioComponent_eventGetParameter_Parms
		{
			FName Name;
			float ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UFMODAudioComponent();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GetParameter"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535, sizeof(FMODAudioComponent_eventGetParameter_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(ReturnValue, FMODAudioComponent_eventGetParameter_Parms), 0x0010000000000580);
			UProperty* NewProp_Name = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Name"), RF_Public|RF_Transient|RF_MarkAsNative) UNameProperty(CPP_PROPERTY_BASE(Name, FMODAudioComponent_eventGetParameter_Parms), 0x0010000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Audio|FMOD|Components"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/FMODAudioComponent.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Set a parameter into the event"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UFMODAudioComponent_GetTimelinePosition()
	{
		struct FMODAudioComponent_eventGetTimelinePosition_Parms
		{
			int32 ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UFMODAudioComponent();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GetTimelinePosition"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535, sizeof(FMODAudioComponent_eventGetTimelinePosition_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UIntProperty(CPP_PROPERTY_BASE(ReturnValue, FMODAudioComponent_eventGetTimelinePosition_Parms), 0x0010000000000580);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Audio|FMOD|Components"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/FMODAudioComponent.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Get the timeline position in milliseconds"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UFMODAudioComponent_IsPlaying()
	{
		struct FMODAudioComponent_eventIsPlaying_Parms
		{
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UFMODAudioComponent();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("IsPlaying"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535, sizeof(FMODAudioComponent_eventIsPlaying_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, FMODAudioComponent_eventIsPlaying_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, FMODAudioComponent_eventIsPlaying_Parms), 0x0010000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, FMODAudioComponent_eventIsPlaying_Parms), sizeof(bool), true);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Audio|FMOD|Components"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/FMODAudioComponent.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("@return true if this component is currently playing an event"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UFMODAudioComponent_Play()
	{
		UObject* Outer=Z_Construct_UClass_UFMODAudioComponent();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("Play"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Audio|FMOD|Components"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/FMODAudioComponent.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Start a sound playing on an audio component"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UFMODAudioComponent_SetEvent()
	{
		struct FMODAudioComponent_eventSetEvent_Parms
		{
			UFMODEvent* NewEvent;
		};
		UObject* Outer=Z_Construct_UClass_UFMODAudioComponent();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SetEvent"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535, sizeof(FMODAudioComponent_eventSetEvent_Parms));
			UProperty* NewProp_NewEvent = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("NewEvent"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(NewEvent, FMODAudioComponent_eventSetEvent_Parms), 0x0010000000000080, Z_Construct_UClass_UFMODEvent_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Audio|FMOD|Components"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/FMODAudioComponent.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UFMODAudioComponent_SetParameter()
	{
		struct FMODAudioComponent_eventSetParameter_Parms
		{
			FName Name;
			float Value;
		};
		UObject* Outer=Z_Construct_UClass_UFMODAudioComponent();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SetParameter"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535, sizeof(FMODAudioComponent_eventSetParameter_Parms));
			UProperty* NewProp_Value = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Value"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(Value, FMODAudioComponent_eventSetParameter_Parms), 0x0010000000000080);
			UProperty* NewProp_Name = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Name"), RF_Public|RF_Transient|RF_MarkAsNative) UNameProperty(CPP_PROPERTY_BASE(Name, FMODAudioComponent_eventSetParameter_Parms), 0x0010000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Audio|FMOD|Components"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/FMODAudioComponent.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Set a parameter into the event"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UFMODAudioComponent_SetPaused()
	{
		struct FMODAudioComponent_eventSetPaused_Parms
		{
			bool paused;
		};
		UObject* Outer=Z_Construct_UClass_UFMODAudioComponent();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SetPaused"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535, sizeof(FMODAudioComponent_eventSetPaused_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(paused, FMODAudioComponent_eventSetPaused_Parms, bool);
			UProperty* NewProp_paused = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("paused"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(paused, FMODAudioComponent_eventSetPaused_Parms), 0x0010000000000080, CPP_BOOL_PROPERTY_BITMASK(paused, FMODAudioComponent_eventSetPaused_Parms), sizeof(bool), true);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Audio|FMOD|Components"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/FMODAudioComponent.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Pause/Unpause an audio component"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UFMODAudioComponent_SetPitch()
	{
		struct FMODAudioComponent_eventSetPitch_Parms
		{
			float pitch;
		};
		UObject* Outer=Z_Construct_UClass_UFMODAudioComponent();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SetPitch"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535, sizeof(FMODAudioComponent_eventSetPitch_Parms));
			UProperty* NewProp_pitch = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("pitch"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(pitch, FMODAudioComponent_eventSetPitch_Parms), 0x0010000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Audio|FMOD|Components"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/FMODAudioComponent.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Set pitch on an audio component"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UFMODAudioComponent_SetProgrammerSoundName()
	{
		struct FMODAudioComponent_eventSetProgrammerSoundName_Parms
		{
			FString Value;
		};
		UObject* Outer=Z_Construct_UClass_UFMODAudioComponent();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SetProgrammerSoundName"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535, sizeof(FMODAudioComponent_eventSetProgrammerSoundName_Parms));
			UProperty* NewProp_Value = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Value"), RF_Public|RF_Transient|RF_MarkAsNative) UStrProperty(CPP_PROPERTY_BASE(Value, FMODAudioComponent_eventSetProgrammerSoundName_Parms), 0x0010000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Audio|FMOD|Components"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/FMODAudioComponent.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Set the sound name to use for programmer sound.  Will look up the name in any loaded audio table."));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UFMODAudioComponent_SetProperty()
	{
		struct FMODAudioComponent_eventSetProperty_Parms
		{
			TEnumAsByte<EFMODEventProperty::Type> Property;
			float Value;
		};
		UObject* Outer=Z_Construct_UClass_UFMODAudioComponent();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SetProperty"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535, sizeof(FMODAudioComponent_eventSetProperty_Parms));
			UProperty* NewProp_Value = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Value"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(Value, FMODAudioComponent_eventSetProperty_Parms), 0x0010000000000080);
			UProperty* NewProp_Property = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Property"), RF_Public|RF_Transient|RF_MarkAsNative) UByteProperty(CPP_PROPERTY_BASE(Property, FMODAudioComponent_eventSetProperty_Parms), 0x0010000000000080, Z_Construct_UEnum_FMODStudio_EFMODEventProperty());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Audio|FMOD|Components"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/FMODAudioComponent.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Set a parameter into the event"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UFMODAudioComponent_SetTimelinePosition()
	{
		struct FMODAudioComponent_eventSetTimelinePosition_Parms
		{
			int32 Time;
		};
		UObject* Outer=Z_Construct_UClass_UFMODAudioComponent();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SetTimelinePosition"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535, sizeof(FMODAudioComponent_eventSetTimelinePosition_Parms));
			UProperty* NewProp_Time = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Time"), RF_Public|RF_Transient|RF_MarkAsNative) UIntProperty(CPP_PROPERTY_BASE(Time, FMODAudioComponent_eventSetTimelinePosition_Parms), 0x0010000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Audio|FMOD|Components"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/FMODAudioComponent.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Set the timeline position in milliseconds"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UFMODAudioComponent_SetVolume()
	{
		struct FMODAudioComponent_eventSetVolume_Parms
		{
			float volume;
		};
		UObject* Outer=Z_Construct_UClass_UFMODAudioComponent();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SetVolume"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535, sizeof(FMODAudioComponent_eventSetVolume_Parms));
			UProperty* NewProp_volume = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("volume"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(volume, FMODAudioComponent_eventSetVolume_Parms), 0x0010000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Audio|FMOD|Components"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/FMODAudioComponent.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Set volume on an audio component"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UFMODAudioComponent_Stop()
	{
		UObject* Outer=Z_Construct_UClass_UFMODAudioComponent();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("Stop"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Audio|FMOD|Components"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/FMODAudioComponent.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Stop an audio component playing its sound cue, issue any delegates if needed"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UFMODAudioComponent_TriggerCue()
	{
		UObject* Outer=Z_Construct_UClass_UFMODAudioComponent();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("TriggerCue"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Audio|FMOD|Components"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/FMODAudioComponent.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Trigger a cue in an event"));
#endif
		}
		return ReturnFunction;
	}
	UClass* Z_Construct_UClass_UFMODAudioComponent_NoRegister()
	{
		return UFMODAudioComponent::StaticClass();
	}
	UClass* Z_Construct_UClass_UFMODAudioComponent()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_USceneComponent();
			Z_Construct_UPackage__Script_FMODStudio();
			OuterClass = UFMODAudioComponent::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20B00080;

				OuterClass->LinkChild(Z_Construct_UFunction_UFMODAudioComponent_GetLength());
				OuterClass->LinkChild(Z_Construct_UFunction_UFMODAudioComponent_GetParameter());
				OuterClass->LinkChild(Z_Construct_UFunction_UFMODAudioComponent_GetTimelinePosition());
				OuterClass->LinkChild(Z_Construct_UFunction_UFMODAudioComponent_IsPlaying());
				OuterClass->LinkChild(Z_Construct_UFunction_UFMODAudioComponent_Play());
				OuterClass->LinkChild(Z_Construct_UFunction_UFMODAudioComponent_SetEvent());
				OuterClass->LinkChild(Z_Construct_UFunction_UFMODAudioComponent_SetParameter());
				OuterClass->LinkChild(Z_Construct_UFunction_UFMODAudioComponent_SetPaused());
				OuterClass->LinkChild(Z_Construct_UFunction_UFMODAudioComponent_SetPitch());
				OuterClass->LinkChild(Z_Construct_UFunction_UFMODAudioComponent_SetProgrammerSoundName());
				OuterClass->LinkChild(Z_Construct_UFunction_UFMODAudioComponent_SetProperty());
				OuterClass->LinkChild(Z_Construct_UFunction_UFMODAudioComponent_SetTimelinePosition());
				OuterClass->LinkChild(Z_Construct_UFunction_UFMODAudioComponent_SetVolume());
				OuterClass->LinkChild(Z_Construct_UFunction_UFMODAudioComponent_Stop());
				OuterClass->LinkChild(Z_Construct_UFunction_UFMODAudioComponent_TriggerCue());

PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_AttenuationOverrides = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("AttenuationOverrides"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(AttenuationOverrides, UFMODAudioComponent), 0x0010000000000005, Z_Construct_UScriptStruct_FAttenuationSettings());
				UProperty* NewProp_AttenuationSettings = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("AttenuationSettings"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(AttenuationSettings, UFMODAudioComponent), 0x0010000000000005, Z_Construct_UClass_USoundAttenuation_NoRegister());
				UProperty* NewProp_ProgrammerSoundName = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("ProgrammerSoundName"), RF_Public|RF_Transient|RF_MarkAsNative) UStrProperty(CPP_PROPERTY_BASE(ProgrammerSoundName, UFMODAudioComponent), 0x0010000000000005);
				UProperty* NewProp_OnTimelineBeat = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("OnTimelineBeat"), RF_Public|RF_Transient|RF_MarkAsNative) UMulticastDelegateProperty(CPP_PROPERTY_BASE(OnTimelineBeat, UFMODAudioComponent), 0x0010000010080000, Z_Construct_UDelegateFunction_FMODStudio_OnTimelineBeat__DelegateSignature());
				UProperty* NewProp_OnTimelineMarker = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("OnTimelineMarker"), RF_Public|RF_Transient|RF_MarkAsNative) UMulticastDelegateProperty(CPP_PROPERTY_BASE(OnTimelineMarker, UFMODAudioComponent), 0x0010000010080000, Z_Construct_UDelegateFunction_FMODStudio_OnTimelineMarker__DelegateSignature());
				UProperty* NewProp_OnEventStopped = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("OnEventStopped"), RF_Public|RF_Transient|RF_MarkAsNative) UMulticastDelegateProperty(CPP_PROPERTY_BASE(OnEventStopped, UFMODAudioComponent), 0x0010000010080000, Z_Construct_UDelegateFunction_FMODStudio_OnEventStopped__DelegateSignature());
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bOverrideAttenuation, UFMODAudioComponent, uint8);
				UProperty* NewProp_bOverrideAttenuation = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bOverrideAttenuation"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bOverrideAttenuation, UFMODAudioComponent), 0x0010000000000005, CPP_BOOL_PROPERTY_BITMASK(bOverrideAttenuation, UFMODAudioComponent), sizeof(uint8), false);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bStopWhenOwnerDestroyed, UFMODAudioComponent, uint8);
				UProperty* NewProp_bStopWhenOwnerDestroyed = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bStopWhenOwnerDestroyed"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bStopWhenOwnerDestroyed, UFMODAudioComponent), 0x0010000000000000, CPP_BOOL_PROPERTY_BITMASK(bStopWhenOwnerDestroyed, UFMODAudioComponent), sizeof(uint8), false);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bAutoDestroy, UFMODAudioComponent, uint8);
				UProperty* NewProp_bAutoDestroy = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bAutoDestroy"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bAutoDestroy, UFMODAudioComponent), 0x0010000000000000, CPP_BOOL_PROPERTY_BITMASK(bAutoDestroy, UFMODAudioComponent), sizeof(uint8), false);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bEnableTimelineCallbacks, UFMODAudioComponent, uint8);
				UProperty* NewProp_bEnableTimelineCallbacks = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bEnableTimelineCallbacks"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bEnableTimelineCallbacks, UFMODAudioComponent), 0x0010000000000001, CPP_BOOL_PROPERTY_BITMASK(bEnableTimelineCallbacks, UFMODAudioComponent), sizeof(uint8), false);
				UProperty* NewProp_Event = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Event"), RF_Public|RF_Transient|RF_MarkAsNative) UAssetObjectProperty(CPP_PROPERTY_BASE(Event, UFMODAudioComponent), 0x0014000000000005, Z_Construct_UClass_UFMODEvent_NoRegister());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UFMODAudioComponent_GetLength(), "GetLength"); // 711808283
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UFMODAudioComponent_GetParameter(), "GetParameter"); // 1487456457
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UFMODAudioComponent_GetTimelinePosition(), "GetTimelinePosition"); // 791909232
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UFMODAudioComponent_IsPlaying(), "IsPlaying"); // 841729559
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UFMODAudioComponent_Play(), "Play"); // 3108134680
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UFMODAudioComponent_SetEvent(), "SetEvent"); // 378729668
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UFMODAudioComponent_SetParameter(), "SetParameter"); // 4134305040
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UFMODAudioComponent_SetPaused(), "SetPaused"); // 636064761
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UFMODAudioComponent_SetPitch(), "SetPitch"); // 2422148957
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UFMODAudioComponent_SetProgrammerSoundName(), "SetProgrammerSoundName"); // 2332328487
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UFMODAudioComponent_SetProperty(), "SetProperty"); // 3423210222
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UFMODAudioComponent_SetTimelinePosition(), "SetTimelinePosition"); // 482600045
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UFMODAudioComponent_SetVolume(), "SetVolume"); // 1403083594
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UFMODAudioComponent_Stop(), "Stop"); // 974121024
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UFMODAudioComponent_TriggerCue(), "TriggerCue"); // 3418767074
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("BlueprintSpawnableComponent"), TEXT(""));
				MetaData->SetValue(OuterClass, TEXT("ClassGroupNames"), TEXT("Audio Common"));
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object ActorComponent Physics Rendering Mobility LOD PhysicsVolume"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("FMODAudioComponent.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/FMODAudioComponent.h"));
				MetaData->SetValue(OuterClass, TEXT("ToolTip"), TEXT("Plays FMOD Studio events."));
				MetaData->SetValue(NewProp_AttenuationOverrides, TEXT("Category"), TEXT("Attenuation"));
				MetaData->SetValue(NewProp_AttenuationOverrides, TEXT("EditCondition"), TEXT("bOverrideAttenuation"));
				MetaData->SetValue(NewProp_AttenuationOverrides, TEXT("ModuleRelativePath"), TEXT("Classes/FMODAudioComponent.h"));
				MetaData->SetValue(NewProp_AttenuationOverrides, TEXT("ToolTip"), TEXT("If bOverrideSettings is true, the attenuation properties to use for sounds generated by this component (FMOD only uses the Occlusion part)"));
				MetaData->SetValue(NewProp_AttenuationSettings, TEXT("Category"), TEXT("Attenuation"));
				MetaData->SetValue(NewProp_AttenuationSettings, TEXT("EditCondition"), TEXT("!bOverrideAttenuation"));
				MetaData->SetValue(NewProp_AttenuationSettings, TEXT("ModuleRelativePath"), TEXT("Classes/FMODAudioComponent.h"));
				MetaData->SetValue(NewProp_AttenuationSettings, TEXT("ToolTip"), TEXT("If bOverrideSettings is false, the asset to use to determine attenuation properties for sounds generated by this component (FMOD only uses the Occlusion part)"));
				MetaData->SetValue(NewProp_ProgrammerSoundName, TEXT("Category"), TEXT("Sound"));
				MetaData->SetValue(NewProp_ProgrammerSoundName, TEXT("ModuleRelativePath"), TEXT("Classes/FMODAudioComponent.h"));
				MetaData->SetValue(NewProp_ProgrammerSoundName, TEXT("ToolTip"), TEXT("Sound name used for programmer sound.  Will look up the name in any loaded audio table."));
				MetaData->SetValue(NewProp_OnTimelineBeat, TEXT("ModuleRelativePath"), TEXT("Classes/FMODAudioComponent.h"));
				MetaData->SetValue(NewProp_OnTimelineBeat, TEXT("ToolTip"), TEXT("called when we reach a beat of a tempo (if bEnableTimelineCallbacks is true)"));
				MetaData->SetValue(NewProp_OnTimelineMarker, TEXT("ModuleRelativePath"), TEXT("Classes/FMODAudioComponent.h"));
				MetaData->SetValue(NewProp_OnTimelineMarker, TEXT("ToolTip"), TEXT("called when we reach a named marker (if bEnableTimelineCallbacks is true)"));
				MetaData->SetValue(NewProp_OnEventStopped, TEXT("ModuleRelativePath"), TEXT("Classes/FMODAudioComponent.h"));
				MetaData->SetValue(NewProp_OnEventStopped, TEXT("ToolTip"), TEXT("called when an event stops, either because it played to completion or because a Stop() call turned it off early"));
				MetaData->SetValue(NewProp_bOverrideAttenuation, TEXT("Category"), TEXT("Attenuation"));
				MetaData->SetValue(NewProp_bOverrideAttenuation, TEXT("ModuleRelativePath"), TEXT("Classes/FMODAudioComponent.h"));
				MetaData->SetValue(NewProp_bOverrideAttenuation, TEXT("ToolTip"), TEXT("Should the Attenuation Settings asset be used or should the properties set directly on the component be used for attenuation properties (FMOD only uses the Occlusion part)"));
				MetaData->SetValue(NewProp_bStopWhenOwnerDestroyed, TEXT("ModuleRelativePath"), TEXT("Classes/FMODAudioComponent.h"));
				MetaData->SetValue(NewProp_bStopWhenOwnerDestroyed, TEXT("ToolTip"), TEXT("Stop sound when owner is destroyed"));
				MetaData->SetValue(NewProp_bAutoDestroy, TEXT("ModuleRelativePath"), TEXT("Classes/FMODAudioComponent.h"));
				MetaData->SetValue(NewProp_bAutoDestroy, TEXT("ToolTip"), TEXT("Auto destroy this component on completion"));
				MetaData->SetValue(NewProp_bEnableTimelineCallbacks, TEXT("Category"), TEXT("Callbacks"));
				MetaData->SetValue(NewProp_bEnableTimelineCallbacks, TEXT("ModuleRelativePath"), TEXT("Classes/FMODAudioComponent.h"));
				MetaData->SetValue(NewProp_bEnableTimelineCallbacks, TEXT("ToolTip"), TEXT("Enable timeline callbacks for this sound, so that OnTimelineMarker and OnTimelineBeat can be used"));
				MetaData->SetValue(NewProp_Event, TEXT("Category"), TEXT("Sound"));
				MetaData->SetValue(NewProp_Event, TEXT("ModuleRelativePath"), TEXT("Classes/FMODAudioComponent.h"));
				MetaData->SetValue(NewProp_Event, TEXT("ToolTip"), TEXT("The event asset to use for this sound"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UFMODAudioComponent(Z_Construct_UClass_UFMODAudioComponent, &UFMODAudioComponent::StaticClass, TEXT("UFMODAudioComponent"), false, nullptr, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(UFMODAudioComponent);
	UClass* Z_Construct_UClass_AFMODAmbientSound_NoRegister()
	{
		return AFMODAmbientSound::StaticClass();
	}
	UClass* Z_Construct_UClass_AFMODAmbientSound()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_AActor();
			Z_Construct_UPackage__Script_FMODStudio();
			OuterClass = AFMODAmbientSound::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20900080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_AudioComponent = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("AudioComponent"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(AudioComponent, AFMODAmbientSound), 0x00100000000a001d, Z_Construct_UClass_UFMODAudioComponent_NoRegister());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("AutoExpandCategories"), TEXT("Audio"));
				MetaData->SetValue(OuterClass, TEXT("ClassGroupNames"), TEXT("Sounds"));
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Collision Input"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("FMODAmbientSound.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/FMODAmbientSound.h"));
				MetaData->SetValue(OuterClass, TEXT("ToolTip"), TEXT("FMOD Ambient Sound."));
				MetaData->SetValue(NewProp_AudioComponent, TEXT("Category"), TEXT("Sound"));
				MetaData->SetValue(NewProp_AudioComponent, TEXT("EditInline"), TEXT("true"));
				MetaData->SetValue(NewProp_AudioComponent, TEXT("ExposeFunctionCategories"), TEXT("Sound"));
				MetaData->SetValue(NewProp_AudioComponent, TEXT("ModuleRelativePath"), TEXT("Classes/FMODAmbientSound.h"));
				MetaData->SetValue(NewProp_AudioComponent, TEXT("ToolTip"), TEXT("The Audio component for this actor"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_AFMODAmbientSound(Z_Construct_UClass_AFMODAmbientSound, &AFMODAmbientSound::StaticClass, TEXT("AFMODAmbientSound"), false, nullptr, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(AFMODAmbientSound);
	UClass* Z_Construct_UClass_UFMODAsset_NoRegister()
	{
		return UFMODAsset::StaticClass();
	}
	UClass* Z_Construct_UClass_UFMODAsset()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UObject();
			Z_Construct_UPackage__Script_FMODStudio();
			OuterClass = UFMODAsset::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20100080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bShowAsAsset, UFMODAsset, bool);
				UProperty* NewProp_bShowAsAsset = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bShowAsAsset"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bShowAsAsset, UFMODAsset), 0x0010000000000000, CPP_BOOL_PROPERTY_BITMASK(bShowAsAsset, UFMODAsset), sizeof(bool), true);
				UProperty* NewProp_AssetGuid = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("AssetGuid"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(AssetGuid, UFMODAsset), 0x0010000000000000, Z_Construct_UScriptStruct_FGuid());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("BlueprintType"), TEXT("true"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("FMODAsset.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/FMODAsset.h"));
				MetaData->SetValue(OuterClass, TEXT("ToolTip"), TEXT("FMOD Asset."));
				MetaData->SetValue(NewProp_bShowAsAsset, TEXT("ModuleRelativePath"), TEXT("Classes/FMODAsset.h"));
				MetaData->SetValue(NewProp_bShowAsAsset, TEXT("ToolTip"), TEXT("Whether to show in the content window"));
				MetaData->SetValue(NewProp_AssetGuid, TEXT("ModuleRelativePath"), TEXT("Classes/FMODAsset.h"));
				MetaData->SetValue(NewProp_AssetGuid, TEXT("ToolTip"), TEXT("The unique Guid, which matches the one exported from FMOD Studio"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UFMODAsset(Z_Construct_UClass_UFMODAsset, &UFMODAsset::StaticClass, TEXT("UFMODAsset"), false, nullptr, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(UFMODAsset);
	UClass* Z_Construct_UClass_UFMODBank_NoRegister()
	{
		return UFMODBank::StaticClass();
	}
	UClass* Z_Construct_UClass_UFMODBank()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UFMODAsset();
			Z_Construct_UPackage__Script_FMODStudio();
			OuterClass = UFMODBank::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20100080;


				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("FMODBank.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/FMODBank.h"));
				MetaData->SetValue(OuterClass, TEXT("ToolTip"), TEXT("FMOD Bank Asset."));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UFMODBank(Z_Construct_UClass_UFMODBank, &UFMODBank::StaticClass, TEXT("UFMODBank"), false, nullptr, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(UFMODBank);
	UClass* Z_Construct_UClass_UFMODBus_NoRegister()
	{
		return UFMODBus::StaticClass();
	}
	UClass* Z_Construct_UClass_UFMODBus()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UFMODAsset();
			Z_Construct_UPackage__Script_FMODStudio();
			OuterClass = UFMODBus::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20100080;


				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("FMODBus.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/FMODBus.h"));
				MetaData->SetValue(OuterClass, TEXT("ToolTip"), TEXT("FMOD Bus Asset."));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UFMODBus(Z_Construct_UClass_UFMODBus, &UFMODBus::StaticClass, TEXT("UFMODBus"), false, nullptr, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(UFMODBus);
	UClass* Z_Construct_UClass_UFMODEvent_NoRegister()
	{
		return UFMODEvent::StaticClass();
	}
	UClass* Z_Construct_UClass_UFMODEvent()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UFMODAsset();
			Z_Construct_UPackage__Script_FMODStudio();
			OuterClass = UFMODEvent::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20100080;


				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("FMODEvent.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/FMODEvent.h"));
				MetaData->SetValue(OuterClass, TEXT("ToolTip"), TEXT("FMOD Event Asset."));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UFMODEvent(Z_Construct_UClass_UFMODEvent, &UFMODEvent::StaticClass, TEXT("UFMODEvent"), false, nullptr, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(UFMODEvent);
	UClass* Z_Construct_UClass_UFMODSnapshot_NoRegister()
	{
		return UFMODSnapshot::StaticClass();
	}
	UClass* Z_Construct_UClass_UFMODSnapshot()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UFMODEvent();
			Z_Construct_UPackage__Script_FMODStudio();
			OuterClass = UFMODSnapshot::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20100080;


				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("FMODSnapshot.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/FMODSnapshot.h"));
				MetaData->SetValue(OuterClass, TEXT("ToolTip"), TEXT("FMOD Snapshot Asset."));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UFMODSnapshot(Z_Construct_UClass_UFMODSnapshot, &UFMODSnapshot::StaticClass, TEXT("UFMODSnapshot"), false, nullptr, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(UFMODSnapshot);
	UClass* Z_Construct_UClass_UFMODVCA_NoRegister()
	{
		return UFMODVCA::StaticClass();
	}
	UClass* Z_Construct_UClass_UFMODVCA()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UFMODAsset();
			Z_Construct_UPackage__Script_FMODStudio();
			OuterClass = UFMODVCA::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20100080;


				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("FMODVCA.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/FMODVCA.h"));
				MetaData->SetValue(OuterClass, TEXT("ToolTip"), TEXT("FMOD VCA Asset."));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UFMODVCA(Z_Construct_UClass_UFMODVCA, &UFMODVCA::StaticClass, TEXT("UFMODVCA"), false, nullptr, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(UFMODVCA);
	UScriptStruct* Z_Construct_UScriptStruct_FFMODEventInstance()
	{
		UPackage* Outer = Z_Construct_UPackage__Script_FMODStudio();
		extern uint32 Get_Z_Construct_UScriptStruct_FFMODEventInstance_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReloadOrDynamic(Outer, TEXT("FMODEventInstance"), sizeof(FFMODEventInstance), Get_Z_Construct_UScriptStruct_FFMODEventInstance_CRC(), false);
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("FMODEventInstance"), RF_Public|RF_Transient|RF_MarkAsNative) UScriptStruct(FObjectInitializer(), NULL, new UScriptStruct::TCppStructOps<FFMODEventInstance>, EStructFlags(0x00000001));
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("BlueprintType"), TEXT("true"));
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Classes/FMODBlueprintStatics.h"));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FFMODEventInstance_CRC() { return 3639153964U; }
	UFunction* Z_Construct_UFunction_UFMODBlueprintStatics_BusSetMute()
	{
		struct FMODBlueprintStatics_eventBusSetMute_Parms
		{
			UFMODBus* Bus;
			bool bMute;
		};
		UObject* Outer=Z_Construct_UClass_UFMODBlueprintStatics();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("BusSetMute"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04022401, 65535, sizeof(FMODBlueprintStatics_eventBusSetMute_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bMute, FMODBlueprintStatics_eventBusSetMute_Parms, bool);
			UProperty* NewProp_bMute = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("bMute"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bMute, FMODBlueprintStatics_eventBusSetMute_Parms), 0x0010000000000080, CPP_BOOL_PROPERTY_BITMASK(bMute, FMODBlueprintStatics_eventBusSetMute_Parms), sizeof(bool), true);
			UProperty* NewProp_Bus = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Bus"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(Bus, FMODBlueprintStatics_eventBusSetMute_Parms), 0x0010000000000080, Z_Construct_UClass_UFMODBus_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Audio|FMOD|Bus"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/FMODBlueprintStatics.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Mute/Unmute this bus\n@param Bus - bus to use\n@param bMute - mute"));
			MetaData->SetValue(ReturnFunction, TEXT("UnsafeDuringActorConstruction"), TEXT("true"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UFMODBlueprintStatics_BusSetPaused()
	{
		struct FMODBlueprintStatics_eventBusSetPaused_Parms
		{
			UFMODBus* Bus;
			bool bPaused;
		};
		UObject* Outer=Z_Construct_UClass_UFMODBlueprintStatics();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("BusSetPaused"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04022401, 65535, sizeof(FMODBlueprintStatics_eventBusSetPaused_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bPaused, FMODBlueprintStatics_eventBusSetPaused_Parms, bool);
			UProperty* NewProp_bPaused = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("bPaused"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bPaused, FMODBlueprintStatics_eventBusSetPaused_Parms), 0x0010000000000080, CPP_BOOL_PROPERTY_BITMASK(bPaused, FMODBlueprintStatics_eventBusSetPaused_Parms), sizeof(bool), true);
			UProperty* NewProp_Bus = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Bus"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(Bus, FMODBlueprintStatics_eventBusSetPaused_Parms), 0x0010000000000080, Z_Construct_UClass_UFMODBus_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Audio|FMOD|Bus"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/FMODBlueprintStatics.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Pause/Unpause all events going through this bus\n@param Bus - bus to use\n@param bPaused - paused"));
			MetaData->SetValue(ReturnFunction, TEXT("UnsafeDuringActorConstruction"), TEXT("true"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UFMODBlueprintStatics_BusSetVolume()
	{
		struct FMODBlueprintStatics_eventBusSetVolume_Parms
		{
			UFMODBus* Bus;
			float Volume;
		};
		UObject* Outer=Z_Construct_UClass_UFMODBlueprintStatics();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("BusSetVolume"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04022401, 65535, sizeof(FMODBlueprintStatics_eventBusSetVolume_Parms));
			UProperty* NewProp_Volume = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Volume"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(Volume, FMODBlueprintStatics_eventBusSetVolume_Parms), 0x0010000000000080);
			UProperty* NewProp_Bus = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Bus"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(Bus, FMODBlueprintStatics_eventBusSetVolume_Parms), 0x0010000000000080, Z_Construct_UClass_UFMODBus_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Audio|FMOD|Bus"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/FMODBlueprintStatics.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Set volume on a bus\n@param Bus - bus to use\n@param Volume - volume"));
			MetaData->SetValue(ReturnFunction, TEXT("UnsafeDuringActorConstruction"), TEXT("true"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UFMODBlueprintStatics_EventInstanceGetParameter()
	{
		struct FMODBlueprintStatics_eventEventInstanceGetParameter_Parms
		{
			FFMODEventInstance EventInstance;
			FName Name;
			float ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UFMODBlueprintStatics();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("EventInstanceGetParameter"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04022401, 65535, sizeof(FMODBlueprintStatics_eventEventInstanceGetParameter_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(ReturnValue, FMODBlueprintStatics_eventEventInstanceGetParameter_Parms), 0x0010000000000580);
			UProperty* NewProp_Name = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Name"), RF_Public|RF_Transient|RF_MarkAsNative) UNameProperty(CPP_PROPERTY_BASE(Name, FMODBlueprintStatics_eventEventInstanceGetParameter_Parms), 0x0010000000000080);
			UProperty* NewProp_EventInstance = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("EventInstance"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(EventInstance, FMODBlueprintStatics_eventEventInstanceGetParameter_Parms), 0x0010000000000080, Z_Construct_UScriptStruct_FFMODEventInstance());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Audio|FMOD|EventInstance"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/FMODBlueprintStatics.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Get a parameter on an FMOD Event Instance.\n@param EventInstance - Event instance\n@param Name - Name of parameter"));
			MetaData->SetValue(ReturnFunction, TEXT("UnsafeDuringActorConstruction"), TEXT("true"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UFMODBlueprintStatics_EventInstanceIsValid()
	{
		struct FMODBlueprintStatics_eventEventInstanceIsValid_Parms
		{
			FFMODEventInstance EventInstance;
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UFMODBlueprintStatics();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("EventInstanceIsValid"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04022401, 65535, sizeof(FMODBlueprintStatics_eventEventInstanceIsValid_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, FMODBlueprintStatics_eventEventInstanceIsValid_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, FMODBlueprintStatics_eventEventInstanceIsValid_Parms), 0x0010000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, FMODBlueprintStatics_eventEventInstanceIsValid_Parms), sizeof(bool), true);
			UProperty* NewProp_EventInstance = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("EventInstance"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(EventInstance, FMODBlueprintStatics_eventEventInstanceIsValid_Parms), 0x0010000000000080, Z_Construct_UScriptStruct_FFMODEventInstance());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Audio|FMOD|EventInstance"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/FMODBlueprintStatics.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Returns whether this FMOD Event Instance is valid.  The instance will be invalidated when the sound stops.\n@param EventInstance - Event instance"));
			MetaData->SetValue(ReturnFunction, TEXT("UnsafeDuringActorConstruction"), TEXT("true"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UFMODBlueprintStatics_EventInstancePlay()
	{
		struct FMODBlueprintStatics_eventEventInstancePlay_Parms
		{
			FFMODEventInstance EventInstance;
		};
		UObject* Outer=Z_Construct_UClass_UFMODBlueprintStatics();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("EventInstancePlay"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04022401, 65535, sizeof(FMODBlueprintStatics_eventEventInstancePlay_Parms));
			UProperty* NewProp_EventInstance = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("EventInstance"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(EventInstance, FMODBlueprintStatics_eventEventInstancePlay_Parms), 0x0010000000000080, Z_Construct_UScriptStruct_FFMODEventInstance());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Audio|FMOD|EventInstance"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/FMODBlueprintStatics.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Plays a FMOD Event Instance.\n@param EventInstance - Event instance"));
			MetaData->SetValue(ReturnFunction, TEXT("UnsafeDuringActorConstruction"), TEXT("true"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UFMODBlueprintStatics_EventInstanceSetParameter()
	{
		struct FMODBlueprintStatics_eventEventInstanceSetParameter_Parms
		{
			FFMODEventInstance EventInstance;
			FName Name;
			float Value;
		};
		UObject* Outer=Z_Construct_UClass_UFMODBlueprintStatics();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("EventInstanceSetParameter"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04022401, 65535, sizeof(FMODBlueprintStatics_eventEventInstanceSetParameter_Parms));
			UProperty* NewProp_Value = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Value"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(Value, FMODBlueprintStatics_eventEventInstanceSetParameter_Parms), 0x0010000000000080);
			UProperty* NewProp_Name = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Name"), RF_Public|RF_Transient|RF_MarkAsNative) UNameProperty(CPP_PROPERTY_BASE(Name, FMODBlueprintStatics_eventEventInstanceSetParameter_Parms), 0x0010000000000080);
			UProperty* NewProp_EventInstance = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("EventInstance"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(EventInstance, FMODBlueprintStatics_eventEventInstanceSetParameter_Parms), 0x0010000000000080, Z_Construct_UScriptStruct_FFMODEventInstance());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Audio|FMOD|EventInstance"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/FMODBlueprintStatics.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Set a parameter on an FMOD Event Instance.\n@param EventInstance - Event instance\n@param Name - Name of parameter\n@param Value - Value of parameter"));
			MetaData->SetValue(ReturnFunction, TEXT("UnsafeDuringActorConstruction"), TEXT("true"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UFMODBlueprintStatics_EventInstanceSetPaused()
	{
		struct FMODBlueprintStatics_eventEventInstanceSetPaused_Parms
		{
			FFMODEventInstance EventInstance;
			bool Paused;
		};
		UObject* Outer=Z_Construct_UClass_UFMODBlueprintStatics();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("EventInstanceSetPaused"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04022401, 65535, sizeof(FMODBlueprintStatics_eventEventInstanceSetPaused_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(Paused, FMODBlueprintStatics_eventEventInstanceSetPaused_Parms, bool);
			UProperty* NewProp_Paused = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Paused"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(Paused, FMODBlueprintStatics_eventEventInstanceSetPaused_Parms), 0x0010000000000080, CPP_BOOL_PROPERTY_BITMASK(Paused, FMODBlueprintStatics_eventEventInstanceSetPaused_Parms), sizeof(bool), true);
			UProperty* NewProp_EventInstance = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("EventInstance"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(EventInstance, FMODBlueprintStatics_eventEventInstanceSetPaused_Parms), 0x0010000000000080, Z_Construct_UScriptStruct_FFMODEventInstance());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Audio|FMOD|EventInstance"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/FMODBlueprintStatics.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Pause/Unpause an FMOD Event Instance.\n@param EventInstance - Event instance\n@param Paused - Whether to pause or unpause"));
			MetaData->SetValue(ReturnFunction, TEXT("UnsafeDuringActorConstruction"), TEXT("true"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UFMODBlueprintStatics_EventInstanceSetPitch()
	{
		struct FMODBlueprintStatics_eventEventInstanceSetPitch_Parms
		{
			FFMODEventInstance EventInstance;
			float Pitch;
		};
		UObject* Outer=Z_Construct_UClass_UFMODBlueprintStatics();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("EventInstanceSetPitch"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04022401, 65535, sizeof(FMODBlueprintStatics_eventEventInstanceSetPitch_Parms));
			UProperty* NewProp_Pitch = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Pitch"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(Pitch, FMODBlueprintStatics_eventEventInstanceSetPitch_Parms), 0x0010000000000080);
			UProperty* NewProp_EventInstance = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("EventInstance"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(EventInstance, FMODBlueprintStatics_eventEventInstanceSetPitch_Parms), 0x0010000000000080, Z_Construct_UScriptStruct_FFMODEventInstance());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Audio|FMOD|EventInstance"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/FMODBlueprintStatics.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Set pitch on an FMOD Event Instance.\n@param EventInstance - Event instance\n@param Value - Volume to set"));
			MetaData->SetValue(ReturnFunction, TEXT("UnsafeDuringActorConstruction"), TEXT("true"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UFMODBlueprintStatics_EventInstanceSetProperty()
	{
		struct FMODBlueprintStatics_eventEventInstanceSetProperty_Parms
		{
			FFMODEventInstance EventInstance;
			TEnumAsByte<EFMODEventProperty::Type> Property;
			float Value;
		};
		UObject* Outer=Z_Construct_UClass_UFMODBlueprintStatics();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("EventInstanceSetProperty"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04022401, 65535, sizeof(FMODBlueprintStatics_eventEventInstanceSetProperty_Parms));
			UProperty* NewProp_Value = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Value"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(Value, FMODBlueprintStatics_eventEventInstanceSetProperty_Parms), 0x0010000000000080);
			UProperty* NewProp_Property = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Property"), RF_Public|RF_Transient|RF_MarkAsNative) UByteProperty(CPP_PROPERTY_BASE(Property, FMODBlueprintStatics_eventEventInstanceSetProperty_Parms), 0x0010000000000080, Z_Construct_UEnum_FMODStudio_EFMODEventProperty());
			UProperty* NewProp_EventInstance = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("EventInstance"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(EventInstance, FMODBlueprintStatics_eventEventInstanceSetProperty_Parms), 0x0010000000000080, Z_Construct_UScriptStruct_FFMODEventInstance());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Audio|FMOD|EventInstance"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/FMODBlueprintStatics.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Set an FMOD event property on an FMOD Event Instance.\n@param EventInstance - Event instance\n@param Property - Property to set\n@param Value - Value to set"));
			MetaData->SetValue(ReturnFunction, TEXT("UnsafeDuringActorConstruction"), TEXT("true"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UFMODBlueprintStatics_EventInstanceSetTransform()
	{
		struct FMODBlueprintStatics_eventEventInstanceSetTransform_Parms
		{
			FFMODEventInstance EventInstance;
			FTransform Location;
		};
		UObject* Outer=Z_Construct_UClass_UFMODBlueprintStatics();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("EventInstanceSetTransform"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04C22401, 65535, sizeof(FMODBlueprintStatics_eventEventInstanceSetTransform_Parms));
			UProperty* NewProp_Location = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Location"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(Location, FMODBlueprintStatics_eventEventInstanceSetTransform_Parms), 0x0010000008000182, Z_Construct_UScriptStruct_FTransform());
			UProperty* NewProp_EventInstance = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("EventInstance"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(EventInstance, FMODBlueprintStatics_eventEventInstanceSetTransform_Parms), 0x0010000000000080, Z_Construct_UScriptStruct_FFMODEventInstance());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Audio|FMOD|EventInstance"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/FMODBlueprintStatics.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Set transform on an FMOD Event Instance.\n@param EventInstance - Event instance\n@param Location - Location to place event"));
			MetaData->SetValue(ReturnFunction, TEXT("UnsafeDuringActorConstruction"), TEXT("true"));
			MetaData->SetValue(NewProp_Location, TEXT("NativeConst"), TEXT(""));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UFMODBlueprintStatics_EventInstanceSetVolume()
	{
		struct FMODBlueprintStatics_eventEventInstanceSetVolume_Parms
		{
			FFMODEventInstance EventInstance;
			float Volume;
		};
		UObject* Outer=Z_Construct_UClass_UFMODBlueprintStatics();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("EventInstanceSetVolume"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04022401, 65535, sizeof(FMODBlueprintStatics_eventEventInstanceSetVolume_Parms));
			UProperty* NewProp_Volume = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Volume"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(Volume, FMODBlueprintStatics_eventEventInstanceSetVolume_Parms), 0x0010000000000080);
			UProperty* NewProp_EventInstance = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("EventInstance"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(EventInstance, FMODBlueprintStatics_eventEventInstanceSetVolume_Parms), 0x0010000000000080, Z_Construct_UScriptStruct_FFMODEventInstance());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Audio|FMOD|EventInstance"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/FMODBlueprintStatics.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Set volume on an FMOD Event Instance.\n@param EventInstance - Event instance\n@param Value - Volume to set"));
			MetaData->SetValue(ReturnFunction, TEXT("UnsafeDuringActorConstruction"), TEXT("true"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UFMODBlueprintStatics_EventInstanceStop()
	{
		struct FMODBlueprintStatics_eventEventInstanceStop_Parms
		{
			FFMODEventInstance EventInstance;
		};
		UObject* Outer=Z_Construct_UClass_UFMODBlueprintStatics();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("EventInstanceStop"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04022401, 65535, sizeof(FMODBlueprintStatics_eventEventInstanceStop_Parms));
			UProperty* NewProp_EventInstance = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("EventInstance"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(EventInstance, FMODBlueprintStatics_eventEventInstanceStop_Parms), 0x0010000000000080, Z_Construct_UScriptStruct_FFMODEventInstance());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Audio|FMOD|EventInstance"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/FMODBlueprintStatics.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Stops a FMOD Event Instance.\n@param EventInstance - Event instance"));
			MetaData->SetValue(ReturnFunction, TEXT("UnsafeDuringActorConstruction"), TEXT("true"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UFMODBlueprintStatics_EventInstanceTriggerCue()
	{
		struct FMODBlueprintStatics_eventEventInstanceTriggerCue_Parms
		{
			FFMODEventInstance EventInstance;
		};
		UObject* Outer=Z_Construct_UClass_UFMODBlueprintStatics();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("EventInstanceTriggerCue"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04022401, 65535, sizeof(FMODBlueprintStatics_eventEventInstanceTriggerCue_Parms));
			UProperty* NewProp_EventInstance = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("EventInstance"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(EventInstance, FMODBlueprintStatics_eventEventInstanceTriggerCue_Parms), 0x0010000000000080, Z_Construct_UScriptStruct_FFMODEventInstance());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Audio|FMOD|EventInstance"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/FMODBlueprintStatics.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Trigger a cue on an FMOD Event Instance.\n@param EventInstance - Event instance"));
			MetaData->SetValue(ReturnFunction, TEXT("UnsafeDuringActorConstruction"), TEXT("true"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UFMODBlueprintStatics_FindAssetByName()
	{
		struct FMODBlueprintStatics_eventFindAssetByName_Parms
		{
			FString Name;
			UFMODAsset* ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UFMODBlueprintStatics();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("FindAssetByName"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04022401, 65535, sizeof(FMODBlueprintStatics_eventFindAssetByName_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(ReturnValue, FMODBlueprintStatics_eventFindAssetByName_Parms), 0x0010000000000580, Z_Construct_UClass_UFMODAsset_NoRegister());
			UProperty* NewProp_Name = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Name"), RF_Public|RF_Transient|RF_MarkAsNative) UStrProperty(CPP_PROPERTY_BASE(Name, FMODBlueprintStatics_eventFindAssetByName_Parms), 0x0010000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Audio|FMOD"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/FMODBlueprintStatics.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Find an asset by name.\n@param EventName - The asset name"));
			MetaData->SetValue(NewProp_Name, TEXT("NativeConst"), TEXT(""));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UFMODBlueprintStatics_FindEventByName()
	{
		struct FMODBlueprintStatics_eventFindEventByName_Parms
		{
			FString Name;
			UFMODEvent* ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UFMODBlueprintStatics();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("FindEventByName"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04022401, 65535, sizeof(FMODBlueprintStatics_eventFindEventByName_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(ReturnValue, FMODBlueprintStatics_eventFindEventByName_Parms), 0x0010000000000580, Z_Construct_UClass_UFMODEvent_NoRegister());
			UProperty* NewProp_Name = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Name"), RF_Public|RF_Transient|RF_MarkAsNative) UStrProperty(CPP_PROPERTY_BASE(Name, FMODBlueprintStatics_eventFindEventByName_Parms), 0x0010000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Audio|FMOD"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/FMODBlueprintStatics.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Find an event by name.\n@param EventName - The event name"));
			MetaData->SetValue(NewProp_Name, TEXT("NativeConst"), TEXT(""));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UFMODBlueprintStatics_FindEventInstances()
	{
		struct FMODBlueprintStatics_eventFindEventInstances_Parms
		{
			UObject* WorldContextObject;
			UFMODEvent* Event;
			TArray<FFMODEventInstance> ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UFMODBlueprintStatics();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("FindEventInstances"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04022401, 65535, sizeof(FMODBlueprintStatics_eventFindEventInstances_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UArrayProperty(CPP_PROPERTY_BASE(ReturnValue, FMODBlueprintStatics_eventFindEventInstances_Parms), 0x0010000000000580);
			UProperty* NewProp_ReturnValue_Inner = new(EC_InternalUseOnlyConstructor, NewProp_ReturnValue, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000, Z_Construct_UScriptStruct_FFMODEventInstance());
			UProperty* NewProp_Event = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Event"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(Event, FMODBlueprintStatics_eventFindEventInstances_Parms), 0x0010000000000080, Z_Construct_UClass_UFMODEvent_NoRegister());
			UProperty* NewProp_WorldContextObject = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("WorldContextObject"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(WorldContextObject, FMODBlueprintStatics_eventFindEventInstances_Parms), 0x0010000000000080, Z_Construct_UClass_UObject_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Audio|FMOD"));
			MetaData->SetValue(ReturnFunction, TEXT("DefaultToSelf"), TEXT("WorldContextObject"));
			MetaData->SetValue(ReturnFunction, TEXT("HidePin"), TEXT("WorldContextObject"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/FMODBlueprintStatics.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Return a list of all event instances that are playing for this event.\n              Be careful using this function because it is possible to find and alter any playing sound, even ones owned by other audio components.\n@param Event - event to find instances from."));
			MetaData->SetValue(ReturnFunction, TEXT("UnsafeDuringActorConstruction"), TEXT("true"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UFMODBlueprintStatics_GetOutputDrivers()
	{
		struct FMODBlueprintStatics_eventGetOutputDrivers_Parms
		{
			TArray<FString> ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UFMODBlueprintStatics();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GetOutputDrivers"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04022401, 65535, sizeof(FMODBlueprintStatics_eventGetOutputDrivers_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UArrayProperty(CPP_PROPERTY_BASE(ReturnValue, FMODBlueprintStatics_eventGetOutputDrivers_Parms), 0x0010000000000580);
			UProperty* NewProp_ReturnValue_Inner = new(EC_InternalUseOnlyConstructor, NewProp_ReturnValue, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UStrProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Audio|FMOD"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/FMODBlueprintStatics.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("List all output device names."));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UFMODBlueprintStatics_IsBankLoaded()
	{
		struct FMODBlueprintStatics_eventIsBankLoaded_Parms
		{
			UFMODBank* Bank;
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UFMODBlueprintStatics();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("IsBankLoaded"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04022401, 65535, sizeof(FMODBlueprintStatics_eventIsBankLoaded_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, FMODBlueprintStatics_eventIsBankLoaded_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, FMODBlueprintStatics_eventIsBankLoaded_Parms), 0x0010000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, FMODBlueprintStatics_eventIsBankLoaded_Parms), sizeof(bool), true);
			UProperty* NewProp_Bank = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Bank"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(Bank, FMODBlueprintStatics_eventIsBankLoaded_Parms), 0x0010000000000080, Z_Construct_UClass_UFMODBank_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Audio|FMOD"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/FMODBlueprintStatics.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Returns true if a bank is loaded.\n@param Bank - bank to query"));
			MetaData->SetValue(ReturnFunction, TEXT("UnsafeDuringActorConstruction"), TEXT("true"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UFMODBlueprintStatics_LoadBank()
	{
		struct FMODBlueprintStatics_eventLoadBank_Parms
		{
			UFMODBank* Bank;
			bool bBlocking;
			bool bLoadSampleData;
		};
		UObject* Outer=Z_Construct_UClass_UFMODBlueprintStatics();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("LoadBank"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04022401, 65535, sizeof(FMODBlueprintStatics_eventLoadBank_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bLoadSampleData, FMODBlueprintStatics_eventLoadBank_Parms, bool);
			UProperty* NewProp_bLoadSampleData = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("bLoadSampleData"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bLoadSampleData, FMODBlueprintStatics_eventLoadBank_Parms), 0x0010000000000080, CPP_BOOL_PROPERTY_BITMASK(bLoadSampleData, FMODBlueprintStatics_eventLoadBank_Parms), sizeof(bool), true);
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bBlocking, FMODBlueprintStatics_eventLoadBank_Parms, bool);
			UProperty* NewProp_bBlocking = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("bBlocking"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bBlocking, FMODBlueprintStatics_eventLoadBank_Parms), 0x0010000000000080, CPP_BOOL_PROPERTY_BITMASK(bBlocking, FMODBlueprintStatics_eventLoadBank_Parms), sizeof(bool), true);
			UProperty* NewProp_Bank = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Bank"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(Bank, FMODBlueprintStatics_eventLoadBank_Parms), 0x0010000000000080, Z_Construct_UClass_UFMODBank_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Audio|FMOD"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/FMODBlueprintStatics.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Loads a bank.\n@param Bank - bank to load\n@param bBlocking - determines whether the bank will load synchronously\n@param bLoadSampleData - determines whether sample data will be preloaded immediately"));
			MetaData->SetValue(ReturnFunction, TEXT("UnsafeDuringActorConstruction"), TEXT("true"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UFMODBlueprintStatics_LoadBankSampleData()
	{
		struct FMODBlueprintStatics_eventLoadBankSampleData_Parms
		{
			UFMODBank* Bank;
		};
		UObject* Outer=Z_Construct_UClass_UFMODBlueprintStatics();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("LoadBankSampleData"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04022401, 65535, sizeof(FMODBlueprintStatics_eventLoadBankSampleData_Parms));
			UProperty* NewProp_Bank = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Bank"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(Bank, FMODBlueprintStatics_eventLoadBankSampleData_Parms), 0x0010000000000080, Z_Construct_UClass_UFMODBank_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Audio|FMOD"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/FMODBlueprintStatics.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Load bank sample data.\n@param Bank - bank to load sample data from"));
			MetaData->SetValue(ReturnFunction, TEXT("UnsafeDuringActorConstruction"), TEXT("true"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UFMODBlueprintStatics_LoadEventSampleData()
	{
		struct FMODBlueprintStatics_eventLoadEventSampleData_Parms
		{
			UObject* WorldContextObject;
			UFMODEvent* Event;
		};
		UObject* Outer=Z_Construct_UClass_UFMODBlueprintStatics();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("LoadEventSampleData"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04022401, 65535, sizeof(FMODBlueprintStatics_eventLoadEventSampleData_Parms));
			UProperty* NewProp_Event = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Event"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(Event, FMODBlueprintStatics_eventLoadEventSampleData_Parms), 0x0010000000000080, Z_Construct_UClass_UFMODEvent_NoRegister());
			UProperty* NewProp_WorldContextObject = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("WorldContextObject"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(WorldContextObject, FMODBlueprintStatics_eventLoadEventSampleData_Parms), 0x0010000000000080, Z_Construct_UClass_UObject_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Audio|FMOD"));
			MetaData->SetValue(ReturnFunction, TEXT("DefaultToSelf"), TEXT("WorldContextObject"));
			MetaData->SetValue(ReturnFunction, TEXT("HidePin"), TEXT("WorldContextObject"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/FMODBlueprintStatics.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Load event sample data.  This can be done ahead of time to avoid loading stalls.\n@param Event - event to load sample data from."));
			MetaData->SetValue(ReturnFunction, TEXT("UnsafeDuringActorConstruction"), TEXT("true"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UFMODBlueprintStatics_MixerResume()
	{
		UObject* Outer=Z_Construct_UClass_UFMODBlueprintStatics();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("MixerResume"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04022401, 65535);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Audio|FMOD"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/FMODBlueprintStatics.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Resume the FMOD mixer.  Used when resuming the application."));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UFMODBlueprintStatics_MixerSuspend()
	{
		UObject* Outer=Z_Construct_UClass_UFMODBlueprintStatics();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("MixerSuspend"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04022401, 65535);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Audio|FMOD"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/FMODBlueprintStatics.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Suspend the FMOD mixer.  Used when suspending the application."));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UFMODBlueprintStatics_PlayEvent2D()
	{
		struct FMODBlueprintStatics_eventPlayEvent2D_Parms
		{
			UObject* WorldContextObject;
			UFMODEvent* Event;
			bool bAutoPlay;
			FFMODEventInstance ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UFMODBlueprintStatics();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("PlayEvent2D"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04022401, 65535, sizeof(FMODBlueprintStatics_eventPlayEvent2D_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(ReturnValue, FMODBlueprintStatics_eventPlayEvent2D_Parms), 0x0010000000000580, Z_Construct_UScriptStruct_FFMODEventInstance());
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bAutoPlay, FMODBlueprintStatics_eventPlayEvent2D_Parms, bool);
			UProperty* NewProp_bAutoPlay = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("bAutoPlay"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bAutoPlay, FMODBlueprintStatics_eventPlayEvent2D_Parms), 0x0010040000000080, CPP_BOOL_PROPERTY_BITMASK(bAutoPlay, FMODBlueprintStatics_eventPlayEvent2D_Parms), sizeof(bool), true);
			UProperty* NewProp_Event = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Event"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(Event, FMODBlueprintStatics_eventPlayEvent2D_Parms), 0x0010000000000080, Z_Construct_UClass_UFMODEvent_NoRegister());
			UProperty* NewProp_WorldContextObject = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("WorldContextObject"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(WorldContextObject, FMODBlueprintStatics_eventPlayEvent2D_Parms), 0x0010000000000080, Z_Construct_UClass_UObject_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("AdvancedDisplay"), TEXT("2"));
			MetaData->SetValue(ReturnFunction, TEXT("bAutoPlay"), TEXT("true"));
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Audio|FMOD"));
			MetaData->SetValue(ReturnFunction, TEXT("DefaultToSelf"), TEXT("WorldContextObject"));
			MetaData->SetValue(ReturnFunction, TEXT("HidePin"), TEXT("WorldContextObject"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/FMODBlueprintStatics.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Plays an event.  This returns an FMOD Event Instance.  The sound does not travel with any actor.\n@param Event - event to play\n@param bAutoPlay - Start the event automatically."));
			MetaData->SetValue(ReturnFunction, TEXT("UnsafeDuringActorConstruction"), TEXT("true"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UFMODBlueprintStatics_PlayEventAtLocation()
	{
		struct FMODBlueprintStatics_eventPlayEventAtLocation_Parms
		{
			UObject* WorldContextObject;
			UFMODEvent* Event;
			FTransform Location;
			bool bAutoPlay;
			FFMODEventInstance ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UFMODBlueprintStatics();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("PlayEventAtLocation"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04C22401, 65535, sizeof(FMODBlueprintStatics_eventPlayEventAtLocation_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(ReturnValue, FMODBlueprintStatics_eventPlayEventAtLocation_Parms), 0x0010000000000580, Z_Construct_UScriptStruct_FFMODEventInstance());
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bAutoPlay, FMODBlueprintStatics_eventPlayEventAtLocation_Parms, bool);
			UProperty* NewProp_bAutoPlay = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("bAutoPlay"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bAutoPlay, FMODBlueprintStatics_eventPlayEventAtLocation_Parms), 0x0010040000000080, CPP_BOOL_PROPERTY_BITMASK(bAutoPlay, FMODBlueprintStatics_eventPlayEventAtLocation_Parms), sizeof(bool), true);
			UProperty* NewProp_Location = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Location"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(Location, FMODBlueprintStatics_eventPlayEventAtLocation_Parms), 0x0010040008000182, Z_Construct_UScriptStruct_FTransform());
			UProperty* NewProp_Event = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Event"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(Event, FMODBlueprintStatics_eventPlayEventAtLocation_Parms), 0x0010000000000080, Z_Construct_UClass_UFMODEvent_NoRegister());
			UProperty* NewProp_WorldContextObject = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("WorldContextObject"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(WorldContextObject, FMODBlueprintStatics_eventPlayEventAtLocation_Parms), 0x0010000000000080, Z_Construct_UClass_UObject_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("AdvancedDisplay"), TEXT("2"));
			MetaData->SetValue(ReturnFunction, TEXT("bAutoPlay"), TEXT("true"));
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Audio|FMOD"));
			MetaData->SetValue(ReturnFunction, TEXT("DefaultToSelf"), TEXT("WorldContextObject"));
			MetaData->SetValue(ReturnFunction, TEXT("HidePin"), TEXT("WorldContextObject"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/FMODBlueprintStatics.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Plays an event at the given location. This returns an FMOD Event Instance.  The sound does not travel with any actor.\n@param Event - event to play\n@param Location - World position to play event at\n@param bAutoPlay - Start the event automatically."));
			MetaData->SetValue(ReturnFunction, TEXT("UnsafeDuringActorConstruction"), TEXT("true"));
			MetaData->SetValue(NewProp_Location, TEXT("NativeConst"), TEXT(""));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UFMODBlueprintStatics_PlayEventAttached()
	{
		struct FMODBlueprintStatics_eventPlayEventAttached_Parms
		{
			UFMODEvent* Event;
			USceneComponent* AttachToComponent;
			FName AttachPointName;
			FVector Location;
			TEnumAsByte<EAttachLocation::Type> LocationType;
			bool bStopWhenAttachedToDestroyed;
			bool bAutoPlay;
			UFMODAudioComponent* ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UFMODBlueprintStatics();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("PlayEventAttached"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04822401, 65535, sizeof(FMODBlueprintStatics_eventPlayEventAttached_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(ReturnValue, FMODBlueprintStatics_eventPlayEventAttached_Parms), 0x0010000000080588, Z_Construct_UClass_UFMODAudioComponent_NoRegister());
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bAutoPlay, FMODBlueprintStatics_eventPlayEventAttached_Parms, bool);
			UProperty* NewProp_bAutoPlay = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("bAutoPlay"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bAutoPlay, FMODBlueprintStatics_eventPlayEventAttached_Parms), 0x0010040000000080, CPP_BOOL_PROPERTY_BITMASK(bAutoPlay, FMODBlueprintStatics_eventPlayEventAttached_Parms), sizeof(bool), true);
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bStopWhenAttachedToDestroyed, FMODBlueprintStatics_eventPlayEventAttached_Parms, bool);
			UProperty* NewProp_bStopWhenAttachedToDestroyed = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("bStopWhenAttachedToDestroyed"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bStopWhenAttachedToDestroyed, FMODBlueprintStatics_eventPlayEventAttached_Parms), 0x0010040000000080, CPP_BOOL_PROPERTY_BITMASK(bStopWhenAttachedToDestroyed, FMODBlueprintStatics_eventPlayEventAttached_Parms), sizeof(bool), true);
			UProperty* NewProp_LocationType = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("LocationType"), RF_Public|RF_Transient|RF_MarkAsNative) UByteProperty(CPP_PROPERTY_BASE(LocationType, FMODBlueprintStatics_eventPlayEventAttached_Parms), 0x0010040000000080, Z_Construct_UEnum_Engine_EAttachLocation());
			UProperty* NewProp_Location = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Location"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(Location, FMODBlueprintStatics_eventPlayEventAttached_Parms), 0x0010040000000080, Z_Construct_UScriptStruct_FVector());
			UProperty* NewProp_AttachPointName = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("AttachPointName"), RF_Public|RF_Transient|RF_MarkAsNative) UNameProperty(CPP_PROPERTY_BASE(AttachPointName, FMODBlueprintStatics_eventPlayEventAttached_Parms), 0x0010040000000080);
			UProperty* NewProp_AttachToComponent = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("AttachToComponent"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(AttachToComponent, FMODBlueprintStatics_eventPlayEventAttached_Parms), 0x0010000000080080, Z_Construct_UClass_USceneComponent_NoRegister());
			UProperty* NewProp_Event = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Event"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(Event, FMODBlueprintStatics_eventPlayEventAttached_Parms), 0x0010000000000080, Z_Construct_UClass_UFMODEvent_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("AdvancedDisplay"), TEXT("2"));
			MetaData->SetValue(ReturnFunction, TEXT("bAutoPlay"), TEXT("true"));
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Audio|FMOD"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/FMODBlueprintStatics.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Plays an event attached to and following the specified component.\n@param Event - event to play\n@param AttachComponent - Component to attach to.\n@param AttachPointName - Optional named point within the AttachComponent to play the sound at\n@param Location - Depending on the value of Location Type this is either a relative offset from the attach component/point or an absolute world position that will be translated to a relative offset\n@param LocationType - Specifies whether Location is a relative offset or an absolute world position\n@param bStopWhenAttachedToDestroyed - Specifies whether the sound should stop playing when the owner of the attach to component is destroyed.\n@param bAutoPlay - Start the event automatically."));
			MetaData->SetValue(ReturnFunction, TEXT("UnsafeDuringActorConstruction"), TEXT("true"));
			MetaData->SetValue(NewProp_ReturnValue, TEXT("EditInline"), TEXT("true"));
			MetaData->SetValue(NewProp_AttachToComponent, TEXT("EditInline"), TEXT("true"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UFMODBlueprintStatics_SetOutputDriverByIndex()
	{
		struct FMODBlueprintStatics_eventSetOutputDriverByIndex_Parms
		{
			int32 NewDriverIndex;
		};
		UObject* Outer=Z_Construct_UClass_UFMODBlueprintStatics();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SetOutputDriverByIndex"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04022401, 65535, sizeof(FMODBlueprintStatics_eventSetOutputDriverByIndex_Parms));
			UProperty* NewProp_NewDriverIndex = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("NewDriverIndex"), RF_Public|RF_Transient|RF_MarkAsNative) UUnsizedIntProperty(CPP_PROPERTY_BASE(NewDriverIndex, FMODBlueprintStatics_eventSetOutputDriverByIndex_Parms), 0x0010000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Audio|FMOD"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/FMODBlueprintStatics.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Set current output device by its index from GetOutputDrivers."));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UFMODBlueprintStatics_SetOutputDriverByName()
	{
		struct FMODBlueprintStatics_eventSetOutputDriverByName_Parms
		{
			FString NewDriverName;
		};
		UObject* Outer=Z_Construct_UClass_UFMODBlueprintStatics();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SetOutputDriverByName"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04022401, 65535, sizeof(FMODBlueprintStatics_eventSetOutputDriverByName_Parms));
			UProperty* NewProp_NewDriverName = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("NewDriverName"), RF_Public|RF_Transient|RF_MarkAsNative) UStrProperty(CPP_PROPERTY_BASE(NewDriverName, FMODBlueprintStatics_eventSetOutputDriverByName_Parms), 0x0010000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Audio|FMOD"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/FMODBlueprintStatics.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Set current output device by name or part of the name."));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UFMODBlueprintStatics_UnloadBank()
	{
		struct FMODBlueprintStatics_eventUnloadBank_Parms
		{
			UFMODBank* Bank;
		};
		UObject* Outer=Z_Construct_UClass_UFMODBlueprintStatics();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("UnloadBank"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04022401, 65535, sizeof(FMODBlueprintStatics_eventUnloadBank_Parms));
			UProperty* NewProp_Bank = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Bank"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(Bank, FMODBlueprintStatics_eventUnloadBank_Parms), 0x0010000000000080, Z_Construct_UClass_UFMODBank_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Audio|FMOD"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/FMODBlueprintStatics.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Unloads a bank.\n@param Bank - bank to unload"));
			MetaData->SetValue(ReturnFunction, TEXT("UnsafeDuringActorConstruction"), TEXT("true"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UFMODBlueprintStatics_UnloadBankSampleData()
	{
		struct FMODBlueprintStatics_eventUnloadBankSampleData_Parms
		{
			UFMODBank* Bank;
		};
		UObject* Outer=Z_Construct_UClass_UFMODBlueprintStatics();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("UnloadBankSampleData"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04022401, 65535, sizeof(FMODBlueprintStatics_eventUnloadBankSampleData_Parms));
			UProperty* NewProp_Bank = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Bank"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(Bank, FMODBlueprintStatics_eventUnloadBankSampleData_Parms), 0x0010000000000080, Z_Construct_UClass_UFMODBank_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Audio|FMOD"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/FMODBlueprintStatics.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Unload bank sample data.\n@param Bank - bank to unload sample data from"));
			MetaData->SetValue(ReturnFunction, TEXT("UnsafeDuringActorConstruction"), TEXT("true"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UFMODBlueprintStatics_UnloadEventSampleData()
	{
		struct FMODBlueprintStatics_eventUnloadEventSampleData_Parms
		{
			UObject* WorldContextObject;
			UFMODEvent* Event;
		};
		UObject* Outer=Z_Construct_UClass_UFMODBlueprintStatics();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("UnloadEventSampleData"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04022401, 65535, sizeof(FMODBlueprintStatics_eventUnloadEventSampleData_Parms));
			UProperty* NewProp_Event = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Event"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(Event, FMODBlueprintStatics_eventUnloadEventSampleData_Parms), 0x0010000000000080, Z_Construct_UClass_UFMODEvent_NoRegister());
			UProperty* NewProp_WorldContextObject = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("WorldContextObject"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(WorldContextObject, FMODBlueprintStatics_eventUnloadEventSampleData_Parms), 0x0010000000000080, Z_Construct_UClass_UObject_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Audio|FMOD"));
			MetaData->SetValue(ReturnFunction, TEXT("DefaultToSelf"), TEXT("WorldContextObject"));
			MetaData->SetValue(ReturnFunction, TEXT("HidePin"), TEXT("WorldContextObject"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/FMODBlueprintStatics.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Unload event sample data.\n@param Event - event to load sample data from."));
			MetaData->SetValue(ReturnFunction, TEXT("UnsafeDuringActorConstruction"), TEXT("true"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UFMODBlueprintStatics_VCASetVolume()
	{
		struct FMODBlueprintStatics_eventVCASetVolume_Parms
		{
			UFMODVCA* Vca;
			float Volume;
		};
		UObject* Outer=Z_Construct_UClass_UFMODBlueprintStatics();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("VCASetVolume"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04022401, 65535, sizeof(FMODBlueprintStatics_eventVCASetVolume_Parms));
			UProperty* NewProp_Volume = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Volume"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(Volume, FMODBlueprintStatics_eventVCASetVolume_Parms), 0x0010000000000080);
			UProperty* NewProp_Vca = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Vca"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(Vca, FMODBlueprintStatics_eventVCASetVolume_Parms), 0x0010000000000080, Z_Construct_UClass_UFMODVCA_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Audio|FMOD|VCA"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/FMODBlueprintStatics.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Set volume on a VCA\n@param Vca - VCA to use\n@param Volume - volume"));
			MetaData->SetValue(ReturnFunction, TEXT("UnsafeDuringActorConstruction"), TEXT("true"));
#endif
		}
		return ReturnFunction;
	}
	UClass* Z_Construct_UClass_UFMODBlueprintStatics_NoRegister()
	{
		return UFMODBlueprintStatics::StaticClass();
	}
	UClass* Z_Construct_UClass_UFMODBlueprintStatics()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UBlueprintFunctionLibrary();
			Z_Construct_UPackage__Script_FMODStudio();
			OuterClass = UFMODBlueprintStatics::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20100080;

				OuterClass->LinkChild(Z_Construct_UFunction_UFMODBlueprintStatics_BusSetMute());
				OuterClass->LinkChild(Z_Construct_UFunction_UFMODBlueprintStatics_BusSetPaused());
				OuterClass->LinkChild(Z_Construct_UFunction_UFMODBlueprintStatics_BusSetVolume());
				OuterClass->LinkChild(Z_Construct_UFunction_UFMODBlueprintStatics_EventInstanceGetParameter());
				OuterClass->LinkChild(Z_Construct_UFunction_UFMODBlueprintStatics_EventInstanceIsValid());
				OuterClass->LinkChild(Z_Construct_UFunction_UFMODBlueprintStatics_EventInstancePlay());
				OuterClass->LinkChild(Z_Construct_UFunction_UFMODBlueprintStatics_EventInstanceSetParameter());
				OuterClass->LinkChild(Z_Construct_UFunction_UFMODBlueprintStatics_EventInstanceSetPaused());
				OuterClass->LinkChild(Z_Construct_UFunction_UFMODBlueprintStatics_EventInstanceSetPitch());
				OuterClass->LinkChild(Z_Construct_UFunction_UFMODBlueprintStatics_EventInstanceSetProperty());
				OuterClass->LinkChild(Z_Construct_UFunction_UFMODBlueprintStatics_EventInstanceSetTransform());
				OuterClass->LinkChild(Z_Construct_UFunction_UFMODBlueprintStatics_EventInstanceSetVolume());
				OuterClass->LinkChild(Z_Construct_UFunction_UFMODBlueprintStatics_EventInstanceStop());
				OuterClass->LinkChild(Z_Construct_UFunction_UFMODBlueprintStatics_EventInstanceTriggerCue());
				OuterClass->LinkChild(Z_Construct_UFunction_UFMODBlueprintStatics_FindAssetByName());
				OuterClass->LinkChild(Z_Construct_UFunction_UFMODBlueprintStatics_FindEventByName());
				OuterClass->LinkChild(Z_Construct_UFunction_UFMODBlueprintStatics_FindEventInstances());
				OuterClass->LinkChild(Z_Construct_UFunction_UFMODBlueprintStatics_GetOutputDrivers());
				OuterClass->LinkChild(Z_Construct_UFunction_UFMODBlueprintStatics_IsBankLoaded());
				OuterClass->LinkChild(Z_Construct_UFunction_UFMODBlueprintStatics_LoadBank());
				OuterClass->LinkChild(Z_Construct_UFunction_UFMODBlueprintStatics_LoadBankSampleData());
				OuterClass->LinkChild(Z_Construct_UFunction_UFMODBlueprintStatics_LoadEventSampleData());
				OuterClass->LinkChild(Z_Construct_UFunction_UFMODBlueprintStatics_MixerResume());
				OuterClass->LinkChild(Z_Construct_UFunction_UFMODBlueprintStatics_MixerSuspend());
				OuterClass->LinkChild(Z_Construct_UFunction_UFMODBlueprintStatics_PlayEvent2D());
				OuterClass->LinkChild(Z_Construct_UFunction_UFMODBlueprintStatics_PlayEventAtLocation());
				OuterClass->LinkChild(Z_Construct_UFunction_UFMODBlueprintStatics_PlayEventAttached());
				OuterClass->LinkChild(Z_Construct_UFunction_UFMODBlueprintStatics_SetOutputDriverByIndex());
				OuterClass->LinkChild(Z_Construct_UFunction_UFMODBlueprintStatics_SetOutputDriverByName());
				OuterClass->LinkChild(Z_Construct_UFunction_UFMODBlueprintStatics_UnloadBank());
				OuterClass->LinkChild(Z_Construct_UFunction_UFMODBlueprintStatics_UnloadBankSampleData());
				OuterClass->LinkChild(Z_Construct_UFunction_UFMODBlueprintStatics_UnloadEventSampleData());
				OuterClass->LinkChild(Z_Construct_UFunction_UFMODBlueprintStatics_VCASetVolume());

				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UFMODBlueprintStatics_BusSetMute(), "BusSetMute"); // 3450222964
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UFMODBlueprintStatics_BusSetPaused(), "BusSetPaused"); // 1243067879
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UFMODBlueprintStatics_BusSetVolume(), "BusSetVolume"); // 1181886188
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UFMODBlueprintStatics_EventInstanceGetParameter(), "EventInstanceGetParameter"); // 2883362433
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UFMODBlueprintStatics_EventInstanceIsValid(), "EventInstanceIsValid"); // 1220185014
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UFMODBlueprintStatics_EventInstancePlay(), "EventInstancePlay"); // 1665308611
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UFMODBlueprintStatics_EventInstanceSetParameter(), "EventInstanceSetParameter"); // 192322436
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UFMODBlueprintStatics_EventInstanceSetPaused(), "EventInstanceSetPaused"); // 2657064301
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UFMODBlueprintStatics_EventInstanceSetPitch(), "EventInstanceSetPitch"); // 2808762197
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UFMODBlueprintStatics_EventInstanceSetProperty(), "EventInstanceSetProperty"); // 275627912
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UFMODBlueprintStatics_EventInstanceSetTransform(), "EventInstanceSetTransform"); // 3357087638
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UFMODBlueprintStatics_EventInstanceSetVolume(), "EventInstanceSetVolume"); // 747400879
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UFMODBlueprintStatics_EventInstanceStop(), "EventInstanceStop"); // 1371418727
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UFMODBlueprintStatics_EventInstanceTriggerCue(), "EventInstanceTriggerCue"); // 127434671
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UFMODBlueprintStatics_FindAssetByName(), "FindAssetByName"); // 2577215409
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UFMODBlueprintStatics_FindEventByName(), "FindEventByName"); // 2664100746
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UFMODBlueprintStatics_FindEventInstances(), "FindEventInstances"); // 3648254619
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UFMODBlueprintStatics_GetOutputDrivers(), "GetOutputDrivers"); // 1447291029
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UFMODBlueprintStatics_IsBankLoaded(), "IsBankLoaded"); // 1228885621
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UFMODBlueprintStatics_LoadBank(), "LoadBank"); // 1525626865
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UFMODBlueprintStatics_LoadBankSampleData(), "LoadBankSampleData"); // 2398875289
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UFMODBlueprintStatics_LoadEventSampleData(), "LoadEventSampleData"); // 2992755250
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UFMODBlueprintStatics_MixerResume(), "MixerResume"); // 1715049702
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UFMODBlueprintStatics_MixerSuspend(), "MixerSuspend"); // 1505684366
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UFMODBlueprintStatics_PlayEvent2D(), "PlayEvent2D"); // 4161623483
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UFMODBlueprintStatics_PlayEventAtLocation(), "PlayEventAtLocation"); // 3636247563
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UFMODBlueprintStatics_PlayEventAttached(), "PlayEventAttached"); // 3050068584
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UFMODBlueprintStatics_SetOutputDriverByIndex(), "SetOutputDriverByIndex"); // 3281811319
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UFMODBlueprintStatics_SetOutputDriverByName(), "SetOutputDriverByName"); // 3524036071
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UFMODBlueprintStatics_UnloadBank(), "UnloadBank"); // 1073940966
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UFMODBlueprintStatics_UnloadBankSampleData(), "UnloadBankSampleData"); // 3879426562
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UFMODBlueprintStatics_UnloadEventSampleData(), "UnloadEventSampleData"); // 1667552593
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UFMODBlueprintStatics_VCASetVolume(), "VCASetVolume"); // 2366908582
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("FMODBlueprintStatics.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/FMODBlueprintStatics.h"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UFMODBlueprintStatics(Z_Construct_UClass_UFMODBlueprintStatics, &UFMODBlueprintStatics::StaticClass, TEXT("UFMODBlueprintStatics"), false, nullptr, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(UFMODBlueprintStatics);
	UEnum* Z_Construct_UEnum_FMODStudio_EFMODSpeakerMode()
	{
		UPackage* Outer=Z_Construct_UPackage__Script_FMODStudio();
		extern uint32 Get_Z_Construct_UEnum_FMODStudio_EFMODSpeakerMode_CRC();
		static UEnum* ReturnEnum = FindExistingEnumIfHotReloadOrDynamic(Outer, TEXT("EFMODSpeakerMode"), 0, Get_Z_Construct_UEnum_FMODStudio_EFMODSpeakerMode_CRC(), false);
		if (!ReturnEnum)
		{
			ReturnEnum = new(EC_InternalUseOnlyConstructor, Outer, TEXT("EFMODSpeakerMode"), RF_Public|RF_Transient|RF_MarkAsNative) UEnum(FObjectInitializer());
			TArray<TPair<FName, uint8>> EnumNames;
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EFMODSpeakerMode::Stereo")), 0));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EFMODSpeakerMode::Surround_5_1")), 1));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EFMODSpeakerMode::Surround_7_1")), 2));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EFMODSpeakerMode::EFMODSpeakerMode_MAX")), 3));
			ReturnEnum->SetEnums(EnumNames, UEnum::ECppForm::Namespaced);
			ReturnEnum->CppType = TEXT("EFMODSpeakerMode::Type");
#if WITH_METADATA
			UMetaData* MetaData = ReturnEnum->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnEnum, TEXT("ModuleRelativePath"), TEXT("Classes/FMODSettings.h"));
			MetaData->SetValue(ReturnEnum, TEXT("Stereo.ToolTip"), TEXT("The speakers are stereo"));
			MetaData->SetValue(ReturnEnum, TEXT("Surround_5_1.ToolTip"), TEXT("5.1 speaker setup"));
			MetaData->SetValue(ReturnEnum, TEXT("Surround_7_1.ToolTip"), TEXT("7.1 speaker setup"));
#endif
		}
		return ReturnEnum;
	}
	uint32 Get_Z_Construct_UEnum_FMODStudio_EFMODSpeakerMode_CRC() { return 2668312094U; }
	UClass* Z_Construct_UClass_UFMODSettings_NoRegister()
	{
		return UFMODSettings::StaticClass();
	}
	UClass* Z_Construct_UClass_UFMODSettings()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UObject();
			Z_Construct_UPackage__Script_FMODStudio();
			OuterClass = UFMODSettings::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20100086;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_WavWriterPath = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("WavWriterPath"), RF_Public|RF_Transient|RF_MarkAsNative) UStrProperty(CPP_PROPERTY_BASE(WavWriterPath, UFMODSettings), 0x0010000000004001);
				UProperty* NewProp_SkipLoadBankName = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("SkipLoadBankName"), RF_Public|RF_Transient|RF_MarkAsNative) UStrProperty(CPP_PROPERTY_BASE(SkipLoadBankName, UFMODSettings), 0x0010000000004001);
				UProperty* NewProp_MasterBankName = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("MasterBankName"), RF_Public|RF_Transient|RF_MarkAsNative) UStrProperty(CPP_PROPERTY_BASE(MasterBankName, UFMODSettings), 0x0010000000004001);
				UProperty* NewProp_ForcePlatformName = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("ForcePlatformName"), RF_Public|RF_Transient|RF_MarkAsNative) UStrProperty(CPP_PROPERTY_BASE(ForcePlatformName, UFMODSettings), 0x0010000000004001);
				UProperty* NewProp_ContentBrowserPrefix = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("ContentBrowserPrefix"), RF_Public|RF_Transient|RF_MarkAsNative) UStrProperty(CPP_PROPERTY_BASE(ContentBrowserPrefix, UFMODSettings), 0x0010000000004001);
				UProperty* NewProp_PluginFiles = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("PluginFiles"), RF_Public|RF_Transient|RF_MarkAsNative) UArrayProperty(CPP_PROPERTY_BASE(PluginFiles, UFMODSettings), 0x0010000000004001);
				UProperty* NewProp_PluginFiles_Inner = new(EC_InternalUseOnlyConstructor, NewProp_PluginFiles, TEXT("PluginFiles"), RF_Public|RF_Transient|RF_MarkAsNative) UStrProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000004000);
				UProperty* NewProp_LiveUpdatePort = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("LiveUpdatePort"), RF_Public|RF_Transient|RF_MarkAsNative) UIntProperty(CPP_PROPERTY_BASE(LiveUpdatePort, UFMODSettings), 0x0010000000004001);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bLockAllBuses, UFMODSettings, bool);
				UProperty* NewProp_bLockAllBuses = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bLockAllBuses"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bLockAllBuses, UFMODSettings), 0x0010000000004001, CPP_BOOL_PROPERTY_BITMASK(bLockAllBuses, UFMODSettings), sizeof(bool), true);
				UProperty* NewProp_InitialOutputDriverName = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("InitialOutputDriverName"), RF_Public|RF_Transient|RF_MarkAsNative) UStrProperty(CPP_PROPERTY_BASE(InitialOutputDriverName, UFMODSettings), 0x0010000000004001);
				UProperty* NewProp_StudioUpdatePeriod = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("StudioUpdatePeriod"), RF_Public|RF_Transient|RF_MarkAsNative) UIntProperty(CPP_PROPERTY_BASE(StudioUpdatePeriod, UFMODSettings), 0x0010000000004001);
				UProperty* NewProp_DSPBufferCount = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("DSPBufferCount"), RF_Public|RF_Transient|RF_MarkAsNative) UIntProperty(CPP_PROPERTY_BASE(DSPBufferCount, UFMODSettings), 0x0010000000004001);
				UProperty* NewProp_DSPBufferLength = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("DSPBufferLength"), RF_Public|RF_Transient|RF_MarkAsNative) UIntProperty(CPP_PROPERTY_BASE(DSPBufferLength, UFMODSettings), 0x0010000000004001);
				UProperty* NewProp_TotalChannelCount = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("TotalChannelCount"), RF_Public|RF_Transient|RF_MarkAsNative) UIntProperty(CPP_PROPERTY_BASE(TotalChannelCount, UFMODSettings), 0x0010000000004001);
				UProperty* NewProp_RealChannelCount = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("RealChannelCount"), RF_Public|RF_Transient|RF_MarkAsNative) UIntProperty(CPP_PROPERTY_BASE(RealChannelCount, UFMODSettings), 0x0010000000004001);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bMatchHardwareSampleRate, UFMODSettings, bool);
				UProperty* NewProp_bMatchHardwareSampleRate = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bMatchHardwareSampleRate"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bMatchHardwareSampleRate, UFMODSettings), 0x0010000000004001, CPP_BOOL_PROPERTY_BITMASK(bMatchHardwareSampleRate, UFMODSettings), sizeof(bool), true);
				UProperty* NewProp_SampleRate = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("SampleRate"), RF_Public|RF_Transient|RF_MarkAsNative) UIntProperty(CPP_PROPERTY_BASE(SampleRate, UFMODSettings), 0x0010000000004001);
				UProperty* NewProp_Vol0VirtualLevel = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Vol0VirtualLevel"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(Vol0VirtualLevel, UFMODSettings), 0x0010000000004001);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bVol0Virtual, UFMODSettings, bool);
				UProperty* NewProp_bVol0Virtual = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bVol0Virtual"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bVol0Virtual, UFMODSettings), 0x0010000000004001, CPP_BOOL_PROPERTY_BITMASK(bVol0Virtual, UFMODSettings), sizeof(bool), true);
				UProperty* NewProp_OutputFormat = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("OutputFormat"), RF_Public|RF_Transient|RF_MarkAsNative) UByteProperty(CPP_PROPERTY_BASE(OutputFormat, UFMODSettings), 0x0010000000004001, Z_Construct_UEnum_FMODStudio_EFMODSpeakerMode());
				UProperty* NewProp_BankOutputDirectory = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("BankOutputDirectory"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(BankOutputDirectory, UFMODSettings), 0x0010000000004001, Z_Construct_UScriptStruct_FDirectoryPath());
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bEnableLiveUpdate, UFMODSettings, bool);
				UProperty* NewProp_bEnableLiveUpdate = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bEnableLiveUpdate"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bEnableLiveUpdate, UFMODSettings), 0x0010000000004001, CPP_BOOL_PROPERTY_BITMASK(bEnableLiveUpdate, UFMODSettings), sizeof(bool), true);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bLoadAllSampleData, UFMODSettings, bool);
				UProperty* NewProp_bLoadAllSampleData = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bLoadAllSampleData"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bLoadAllSampleData, UFMODSettings), 0x0010000000004001, CPP_BOOL_PROPERTY_BITMASK(bLoadAllSampleData, UFMODSettings), sizeof(bool), true);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bLoadAllBanks, UFMODSettings, bool);
				UProperty* NewProp_bLoadAllBanks = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bLoadAllBanks"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bLoadAllBanks, UFMODSettings), 0x0010000000004001, CPP_BOOL_PROPERTY_BITMASK(bLoadAllBanks, UFMODSettings), sizeof(bool), true);
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->ClassConfigName = FName(TEXT("Engine"));
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("FMODSettings.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/FMODSettings.h"));
				MetaData->SetValue(NewProp_WavWriterPath, TEXT("Category"), TEXT("Advanced"));
				MetaData->SetValue(NewProp_WavWriterPath, TEXT("ModuleRelativePath"), TEXT("Classes/FMODSettings.h"));
				MetaData->SetValue(NewProp_WavWriterPath, TEXT("ToolTip"), TEXT("Force wav writer output, for debugging only.  Setting this will prevent normal sound output!"));
				MetaData->SetValue(NewProp_SkipLoadBankName, TEXT("Category"), TEXT("Advanced"));
				MetaData->SetValue(NewProp_SkipLoadBankName, TEXT("ModuleRelativePath"), TEXT("Classes/FMODSettings.h"));
				MetaData->SetValue(NewProp_SkipLoadBankName, TEXT("ToolTip"), TEXT("Skip bank files of the given name.\nCan be used to load all banks except for a certain set, such as localization banks."));
				MetaData->SetValue(NewProp_MasterBankName, TEXT("Category"), TEXT("Advanced"));
				MetaData->SetValue(NewProp_MasterBankName, TEXT("ModuleRelativePath"), TEXT("Classes/FMODSettings.h"));
				MetaData->SetValue(NewProp_MasterBankName, TEXT("ToolTip"), TEXT("Name of master bank.  The default in Studio is \"Master Bank\"."));
				MetaData->SetValue(NewProp_ForcePlatformName, TEXT("Category"), TEXT("Advanced"));
				MetaData->SetValue(NewProp_ForcePlatformName, TEXT("ModuleRelativePath"), TEXT("Classes/FMODSettings.h"));
				MetaData->SetValue(NewProp_ForcePlatformName, TEXT("ToolTip"), TEXT("Force platform directory name, or leave empty for automatic (Desktop/Mobile/PS4/XBoxOne)"));
				MetaData->SetValue(NewProp_ContentBrowserPrefix, TEXT("Category"), TEXT("Advanced"));
				MetaData->SetValue(NewProp_ContentBrowserPrefix, TEXT("ModuleRelativePath"), TEXT("Classes/FMODSettings.h"));
				MetaData->SetValue(NewProp_ContentBrowserPrefix, TEXT("ToolTip"), TEXT("Directory for content to appear in content window. Be careful changing this!"));
				MetaData->SetValue(NewProp_PluginFiles, TEXT("Category"), TEXT("Advanced"));
				MetaData->SetValue(NewProp_PluginFiles, TEXT("ModuleRelativePath"), TEXT("Classes/FMODSettings.h"));
				MetaData->SetValue(NewProp_PluginFiles, TEXT("ToolTip"), TEXT("Extra plugin files to load.\nThe plugin files should sit alongside the FMOD dynamic libraries in the ThirdParty directory."));
				MetaData->SetValue(NewProp_LiveUpdatePort, TEXT("Category"), TEXT("Advanced"));
				MetaData->SetValue(NewProp_LiveUpdatePort, TEXT("ModuleRelativePath"), TEXT("Classes/FMODSettings.h"));
				MetaData->SetValue(NewProp_LiveUpdatePort, TEXT("ToolTip"), TEXT("Live update port to use, or 0 for default."));
				MetaData->SetValue(NewProp_bLockAllBuses, TEXT("Category"), TEXT("InitSettings"));
				MetaData->SetValue(NewProp_bLockAllBuses, TEXT("ModuleRelativePath"), TEXT("Classes/FMODSettings.h"));
				MetaData->SetValue(NewProp_bLockAllBuses, TEXT("ToolTip"), TEXT("Lock all mixer buses at startup, making sure they are created up front."));
				MetaData->SetValue(NewProp_InitialOutputDriverName, TEXT("Category"), TEXT("InitSettings"));
				MetaData->SetValue(NewProp_InitialOutputDriverName, TEXT("ModuleRelativePath"), TEXT("Classes/FMODSettings.h"));
				MetaData->SetValue(NewProp_InitialOutputDriverName, TEXT("ToolTip"), TEXT("Output device to choose at system start up, or empty for default."));
				MetaData->SetValue(NewProp_StudioUpdatePeriod, TEXT("Category"), TEXT("InitSettings"));
				MetaData->SetValue(NewProp_StudioUpdatePeriod, TEXT("ModuleRelativePath"), TEXT("Classes/FMODSettings.h"));
				MetaData->SetValue(NewProp_StudioUpdatePeriod, TEXT("ToolTip"), TEXT("Studio update period in milliseconds, or 0 for default (which means 20ms)."));
				MetaData->SetValue(NewProp_DSPBufferCount, TEXT("Category"), TEXT("InitSettings"));
				MetaData->SetValue(NewProp_DSPBufferCount, TEXT("ModuleRelativePath"), TEXT("Classes/FMODSettings.h"));
				MetaData->SetValue(NewProp_DSPBufferCount, TEXT("ToolTip"), TEXT("DSP mixer buffer count, or 0 for system default."));
				MetaData->SetValue(NewProp_DSPBufferLength, TEXT("Category"), TEXT("InitSettings"));
				MetaData->SetValue(NewProp_DSPBufferLength, TEXT("ModuleRelativePath"), TEXT("Classes/FMODSettings.h"));
				MetaData->SetValue(NewProp_DSPBufferLength, TEXT("ToolTip"), TEXT("DSP mixer buffer length, or 0 for system default."));
				MetaData->SetValue(NewProp_TotalChannelCount, TEXT("Category"), TEXT("InitSettings"));
				MetaData->SetValue(NewProp_TotalChannelCount, TEXT("ModuleRelativePath"), TEXT("Classes/FMODSettings.h"));
				MetaData->SetValue(NewProp_TotalChannelCount, TEXT("ToolTip"), TEXT("Total number of voices available that can be either real or virtual."));
				MetaData->SetValue(NewProp_RealChannelCount, TEXT("Category"), TEXT("InitSettings"));
				MetaData->SetValue(NewProp_RealChannelCount, TEXT("ModuleRelativePath"), TEXT("Classes/FMODSettings.h"));
				MetaData->SetValue(NewProp_RealChannelCount, TEXT("ToolTip"), TEXT("Number of actual software voices that can be used at once."));
				MetaData->SetValue(NewProp_bMatchHardwareSampleRate, TEXT("Category"), TEXT("InitSettings"));
				MetaData->SetValue(NewProp_bMatchHardwareSampleRate, TEXT("ModuleRelativePath"), TEXT("Classes/FMODSettings.h"));
				MetaData->SetValue(NewProp_bMatchHardwareSampleRate, TEXT("ToolTip"), TEXT("Whether to match hardware sample rate where reasonable (44.1kHz to 48kHz)."));
				MetaData->SetValue(NewProp_SampleRate, TEXT("Category"), TEXT("InitSettings"));
				MetaData->SetValue(NewProp_SampleRate, TEXT("ModuleRelativePath"), TEXT("Classes/FMODSettings.h"));
				MetaData->SetValue(NewProp_SampleRate, TEXT("ToolTip"), TEXT("Sample rate to use, or 0 to match system rate."));
				MetaData->SetValue(NewProp_Vol0VirtualLevel, TEXT("Category"), TEXT("InitSettings"));
				MetaData->SetValue(NewProp_Vol0VirtualLevel, TEXT("ModuleRelativePath"), TEXT("Classes/FMODSettings.h"));
				MetaData->SetValue(NewProp_Vol0VirtualLevel, TEXT("ToolTip"), TEXT("If vol0virtual is enabled, the signal level at which to make channels virtual."));
				MetaData->SetValue(NewProp_bVol0Virtual, TEXT("Category"), TEXT("InitSettings"));
				MetaData->SetValue(NewProp_bVol0Virtual, TEXT("ModuleRelativePath"), TEXT("Classes/FMODSettings.h"));
				MetaData->SetValue(NewProp_bVol0Virtual, TEXT("ToolTip"), TEXT("Whether to enable vol0virtual, which means voices with low volume will automatically go virtual to save CPU."));
				MetaData->SetValue(NewProp_OutputFormat, TEXT("Category"), TEXT("Basic"));
				MetaData->SetValue(NewProp_OutputFormat, TEXT("ModuleRelativePath"), TEXT("Classes/FMODSettings.h"));
				MetaData->SetValue(NewProp_OutputFormat, TEXT("ToolTip"), TEXT("Project Output Format, should match the mode set up for the Studio project."));
				MetaData->SetValue(NewProp_BankOutputDirectory, TEXT("Category"), TEXT("Basic"));
				MetaData->SetValue(NewProp_BankOutputDirectory, TEXT("ModuleRelativePath"), TEXT("Classes/FMODSettings.h"));
				MetaData->SetValue(NewProp_BankOutputDirectory, TEXT("RelativeToGameContentDir"), TEXT(""));
				MetaData->SetValue(NewProp_BankOutputDirectory, TEXT("ToolTip"), TEXT("Path to find your studio bank output directory, relative to Content directory."));
				MetaData->SetValue(NewProp_bEnableLiveUpdate, TEXT("Category"), TEXT("Basic"));
				MetaData->SetValue(NewProp_bEnableLiveUpdate, TEXT("ModuleRelativePath"), TEXT("Classes/FMODSettings.h"));
				MetaData->SetValue(NewProp_bEnableLiveUpdate, TEXT("ToolTip"), TEXT("Enable live update in non-final builds."));
				MetaData->SetValue(NewProp_bLoadAllSampleData, TEXT("Category"), TEXT("Basic"));
				MetaData->SetValue(NewProp_bLoadAllSampleData, TEXT("ModuleRelativePath"), TEXT("Classes/FMODSettings.h"));
				MetaData->SetValue(NewProp_bLoadAllSampleData, TEXT("ToolTip"), TEXT("Whether to load all bank sample data into memory at startup."));
				MetaData->SetValue(NewProp_bLoadAllBanks, TEXT("Category"), TEXT("Basic"));
				MetaData->SetValue(NewProp_bLoadAllBanks, TEXT("ModuleRelativePath"), TEXT("Classes/FMODSettings.h"));
				MetaData->SetValue(NewProp_bLoadAllBanks, TEXT("ToolTip"), TEXT("Whether to load all banks at startup."));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UFMODSettings(Z_Construct_UClass_UFMODSettings, &UFMODSettings::StaticClass, TEXT("UFMODSettings"), false, nullptr, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(UFMODSettings);
	UClass* Z_Construct_UClass_UFMODSnapshotReverb_NoRegister()
	{
		return UFMODSnapshotReverb::StaticClass();
	}
	UClass* Z_Construct_UClass_UFMODSnapshotReverb()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UReverbEffect();
			Z_Construct_UPackage__Script_FMODStudio();
			OuterClass = UFMODSnapshotReverb::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20100080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bShowAsAsset, UFMODSnapshotReverb, bool);
				UProperty* NewProp_bShowAsAsset = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bShowAsAsset"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bShowAsAsset, UFMODSnapshotReverb), 0x0010000000000000, CPP_BOOL_PROPERTY_BITMASK(bShowAsAsset, UFMODSnapshotReverb), sizeof(bool), true);
				UProperty* NewProp_AssetGuid = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("AssetGuid"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(AssetGuid, UFMODSnapshotReverb), 0x0010000000000000, Z_Construct_UScriptStruct_FGuid());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("FMODSnapshotReverb.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/FMODSnapshotReverb.h"));
				MetaData->SetValue(OuterClass, TEXT("ToolTip"), TEXT("FMOD Event Asset."));
				MetaData->SetValue(NewProp_bShowAsAsset, TEXT("ModuleRelativePath"), TEXT("Classes/FMODSnapshotReverb.h"));
				MetaData->SetValue(NewProp_bShowAsAsset, TEXT("ToolTip"), TEXT("Whether to show in the content window"));
				MetaData->SetValue(NewProp_AssetGuid, TEXT("ModuleRelativePath"), TEXT("Classes/FMODSnapshotReverb.h"));
				MetaData->SetValue(NewProp_AssetGuid, TEXT("ToolTip"), TEXT("The unique Guid, which matches the one exported from FMOD Studio"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UFMODSnapshotReverb(Z_Construct_UClass_UFMODSnapshotReverb, &UFMODSnapshotReverb::StaticClass, TEXT("UFMODSnapshotReverb"), false, nullptr, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(UFMODSnapshotReverb);
	UPackage* Z_Construct_UPackage__Script_FMODStudio()
	{
		static UPackage* ReturnPackage = NULL;
		if (!ReturnPackage)
		{
			ReturnPackage = CastChecked<UPackage>(StaticFindObjectFast(UPackage::StaticClass(), NULL, FName(TEXT("/Script/FMODStudio")), false, false));
			ReturnPackage->SetPackageFlags(PKG_CompiledIn | 0x00000000);
			FGuid Guid;
			Guid.A = 0x8FD26A35;
			Guid.B = 0x03AC8380;
			Guid.C = 0x00000000;
			Guid.D = 0x00000000;
			ReturnPackage->SetGuid(Guid);

			Z_Construct_UDelegateFunction_FMODStudio_OnEventStopped__DelegateSignature();
			Z_Construct_UDelegateFunction_FMODStudio_OnTimelineMarker__DelegateSignature();
			Z_Construct_UDelegateFunction_FMODStudio_OnTimelineBeat__DelegateSignature();
		}
		return ReturnPackage;
	}
#endif

PRAGMA_ENABLE_DEPRECATION_WARNINGS
